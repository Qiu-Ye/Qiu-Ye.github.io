<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QiuYe</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qiu-ye.github.io/"/>
  <updated>2018-10-23T10:20:30.089Z</updated>
  <id>https://qiu-ye.github.io/</id>
  
  <author>
    <name>QiuYe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>固态硬盘那些事</title>
    <link href="https://qiu-ye.github.io/2018/10/23/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>https://qiu-ye.github.io/2018/10/23/固态硬盘那些事/</id>
    <published>2018-10-23T06:52:00.000Z</published>
    <updated>2018-10-23T10:20:30.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p><img src="http://pf1jz9eu0.bkt.clouddn.com/18-10-23/43985557.jpg" alt=""></p><p>ψ(._. )&gt;</p><hr><p>这两天帮同学换/修固态硬盘，记几件关于SSD的小tips。</p><a id="more"></a><h3 id="固态硬盘那些事"><a href="#固态硬盘那些事" class="headerlink" title="固态硬盘那些事"></a>固态硬盘那些事</h3><h4 id="克隆硬盘——老机升级固态硬盘的最快方法"><a href="#克隆硬盘——老机升级固态硬盘的最快方法" class="headerlink" title="克隆硬盘——老机升级固态硬盘的最快方法"></a>克隆硬盘——老机升级固态硬盘的最快方法</h4><p>身边的朋友在我的安利基本上都为自己几年的老本本换上了固态硬盘。其他的还在观望的大多是考虑到重做系统后的软件恢复太麻烦，驱动安装和常用软件重装是小事，各种仿真软件、IDE、办公软件的安装与破解、不同花样的编程环境配置、一些小型的效率工具软件的个性化设置等等……才是最让人头大的，极大的降低了折腾欲望。</p><p>而此次作系统的时候，我没有选择重头开始，而是使用了<strong>DiskGenius</strong>软件中的<strong>克隆磁盘</strong>功能。</p><p><img src="http://pf1jz9eu0.bkt.clouddn.com/18-10-23/35288163.jpg" alt=""></p><p>该功能可以按照不同的方式将源磁盘上的所有内容全部复制到目标磁盘中，甚至可以精确到磁盘扇区。这样以来，只需要找到一块符合要求的源磁盘，将数据完整克隆至新磁盘中，即可免去系统重装的繁琐事务，迅速的得到一块含有完整系统数据、软件数据的磁盘。所谓“符合要求”的源磁盘，需满足以下条件：</p><ul><li>源磁盘的容量大小应与目标磁盘一致。（必须）</li><li>源磁盘中的所有软件都可以脱离其他磁盘正常运行。也就是说，所有软件的安装位置都在C盘或者D盘中，软件正常运行需要的资源（注册表和数据）依赖都限定在此块磁盘内。（必须）</li><li>源磁盘中软件的安装位置整洁规范。软件最好都放在D盘的<code>Program Files (x86)</code>文件夹里，每个软件单独存放在软件名命名的文件夹中。</li></ul><p><img src="http://pf1jz9eu0.bkt.clouddn.com/18-10-23/5512628.jpg" alt=""></p><p>克隆结束后，直接将新磁盘装入电脑中，第一次开机通常会触发磁盘检查，不要跳过这一步，让系统自动进行检查和修复。修复完成后即可进入系统，这是一个和源磁盘完全相同的系统，系统配置、桌面、应用软件都完全一样，编程环境也不需要重新设置，新系统直接就可以投入工作。另外，新系统克隆完有几点需要注意的地方：</p><ul><li>如果源磁盘中的系统是数字权利激活的，新系统的激活验证会失败，自己想办法激活一下即可。</li><li>新系统中的驱动需要更新一下。</li><li>源系统的账号信息也会完整保留，需要更改一下。</li><li>尽量将浏览器重置。浏览器会记录账号密码情况，处于对别人隐私的尊重，请务必重置浏览器。</li></ul><p>使用这种方法，可以大大缩短升级SSD的时间成本。从克隆硬盘、拆机安装到新系统就位，基本可以控制在半小时以内。虽然有条件要求，但如果在购置SSD之前就找一个在电脑使用方面保持好习惯同学，问清楚他作为系统盘的固态硬盘容量大小，后续的升级过程就会如丝般顺滑。</p><h4 id="出现“掉盘”问题的SSD还有救吗"><a href="#出现“掉盘”问题的SSD还有救吗" class="headerlink" title="出现“掉盘”问题的SSD还有救吗"></a>出现“掉盘”问题的SSD还有救吗</h4><p>同学的<code>SanDisk SSD PLUS</code> 120G的固态在使用过程中，由于一次强制关机，导致硬盘无法被识别，即“掉盘”问题。通过从网上查资料，我尝试着修复这块SSD，在经过多次尝试，最终复活了这块SSD，把步骤和思路记录下来。</p><ol><li><p>拆开SSD，确认主控芯片的型号。</p><ul><li>这块闪迪的SSD使用的主控芯片是<code>慧荣SM2256XT芯片</code>。</li><li>该芯片属于常见的固态硬盘主控型号，<a href="http://www.upantool.com/ssd/tool/smi/" target="_blank" rel="noopener">U盘量产网的SSD专区</a>有很多相关的资源和量产工具。</li></ul></li><li><p>通过短接PCB上的触点，使得SSD被重新识别。</p><ul><li>通过在论坛的搜索得知，不同的SSD型号的短接方式不同，但通常PCB上会预留出能进行的短接的焊盘孔。</li><li>该型号的短接触点在丝印ROM字样旁边，有两个距离很近的焊盘孔，用导线短接。</li><li>把短接处理后的PCB装在支持SATA口的硬盘盒里，硬盘盒的USB端接到电脑上，如果短接的触点没有错误的话，在系统的磁盘管理界面可以识别出磁盘，容量大概1G左右。<ul><li>此处需要注意：这一步的操作最好在Win7系统的电脑上进行。我在Win10 64位的电脑上操作时始终没有反应。在偶然看到一篇帖子上提到Win10 64位系统可能出问题后，换至Win7系统上，顺利识别。</li></ul></li><li>识别后就要把短接线去掉（这一步很关键，负责后续的操作会报错）</li></ul></li><li><p>去<a href="http://www.upantool.com/ssd/tool/smi/" target="_blank" rel="noopener">U盘量产网的SSD专区</a>下载主控芯片专用的量产工具。</p><ul><li>量产工具有很多版本，版本不同表示时间不同，其支持的Flash芯片也不一样。</li></ul></li><li><p>打开量产软件，对磁盘进行重新量产操作。</p><ul><li><p>点击Scan Drive按钮，顺利的话界面会显示Ready字样。</p><p><img src="http://pf1jz9eu0.bkt.clouddn.com/18-10-23/817680.jpg" alt=""></p></li><li><p>切换到parameter界面，点击auto，在Flash Select处选择相应的型号。如果Flash Select处识别为空，则说明量产工具的版本出错，需要重新去网上下载。</p><ul><li>在尝试了足足5个版本的量产软件后，sm2246XT_MPTool_O0311A版本成功识别出Flash的型号。至今不知道需要依据什么选择量产工具的版本。</li></ul><p><img src="http://pf1jz9eu0.bkt.clouddn.com/18-10-23/12130994.jpg" alt=""></p></li><li><p>回到test界面点击start，待界面下方的图标上显示一个绿色的“O”后，磁盘修复完成。</p></li></ul></li><li><p>重新插拔移动硬盘即可正常识别，满血复活。</p></li></ol><hr><p>完结撒花~撒花~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://pf1jz9eu0.bkt.clouddn.com/18-10-23/43985557.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;ψ(._. )&amp;gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这两天帮同学换/修固态硬盘，记几件关于SSD的小tips。&lt;/p&gt;
    
    </summary>
    
      <category term="磨刀不误砍柴工" scheme="https://qiu-ye.github.io/categories/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/"/>
    
    
      <category term="SSD" scheme="https://qiu-ye.github.io/tags/SSD/"/>
    
  </entry>
  
  <entry>
    <title>Django入门</title>
    <link href="https://qiu-ye.github.io/2018/10/06/Django%E5%85%A5%E9%97%A8/"/>
    <id>https://qiu-ye.github.io/2018/10/06/Django入门/</id>
    <published>2018-10-06T09:18:00.000Z</published>
    <updated>2018-10-07T09:27:23.004Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p><img src="http://pf1jz9eu0.bkt.clouddn.com/18-10-6/85076748.jpg" alt=""></p><p>ψ(._. )&gt;</p><hr><p>Django入门</p><a id="more"></a><h3 id="Django入门"><a href="#Django入门" class="headerlink" title="Django入门"></a>Django入门</h3><h4 id="建立项目"><a href="#建立项目" class="headerlink" title="建立项目"></a>建立项目</h4><h5 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h5><p>要使用Django，首先需要建立一个虚拟工作环境。虚拟环境是系统的一个位置，你可以在其中安装包，并将其与其他的Python包隔离。</p><ol><li><p>建立虚拟环境</p><ul><li>file_dir$ <code>python -m venv ll_env</code></li></ul></li><li><p>激活虚拟环境</p><ul><li>*nux：<ul><li>file_dir$ <code>source ll_env/bin/activate</code></li></ul></li><li>windows：<ul><li>file_dir$ <code>ll_env\Scripts\activate</code></li></ul></li></ul></li><li><p>停止虚拟环境</p><ul><li>(ll_env)file_dir$ <code>deactivate</code></li></ul></li><li><p>安装Django</p><ul><li>(ll_env)file_dir$ <code>pip install Django</code></li></ul></li></ol><h5 id="创建Django项目"><a href="#创建Django项目" class="headerlink" title="创建Django项目"></a>创建Django项目</h5><p>在处于活动的虚拟环境下:<strong>(ll_env)file_dir$</strong></p><ol><li><p>新建项目</p><ul><li>(ll_env)file_dir$ <code>django-admin startproject project_name .</code><ul><li>注意：命令末尾的句点（·）让新项目使用合适的目录结构，这样开发完成后可轻松地将应用程序部署到服务器。</li></ul></li></ul></li><li><p>创建数据库</p><ul><li>(ll_env)file_dir$ <code>python manage.py migrate</code><ul><li>首次执行migrate命令时，将让Django确保数据库与项目的当前状态匹配。</li><li>SQLite是一种使用单个文件的数据库，是编写简单应用程序的理想选择，因为它让你不用太关注数据库管理的问题。</li></ul></li></ul></li><li><p>查看项目</p><ul><li>(ll_env)file_dir$ <code>python manage.py runserver</code></li></ul></li></ol><h5 id="创建应用程序"><a href="#创建应用程序" class="headerlink" title="创建应用程序"></a>创建应用程序</h5><p>保留仍在运行runserver的终端窗口，再打开一个终端窗口，并切换到manage.py所在的目录。</p><ol><li><p>激活新的虚拟环境</p></li><li><p>创建应用程序所需的基础文件</p><ul><li>(ll_env)file_dir$ <code>python manage.py startapp project_name_apps</code></li></ul></li><li><p>定义模型</p><ul><li>在file_dir/project_name_apps/models.py中定义模型。</li></ul></li><li><p>激活模型</p><ul><li>在file_dir/project_name/settings.py中的INSTALLED_APPS字段中新建应用程序片段。</li></ul></li><li><p>同步数据库</p><ul><li>修改数据库，使其能够存储与模型相关的信息。<ul><li>(ll_env)file_dir$ <code>python manage.py makemigrations project_name_apps</code></li></ul></li><li>执行数据库变更操作。<ul><li>(ll_env)file_dir$ <code>python manage.py migrate</code></li></ul></li></ul></li></ol><h5 id="管理网站"><a href="#管理网站" class="headerlink" title="管理网站"></a>管理网站</h5><p>为应用程序定义模型时，Django提供的管理网站能够很方便地处理模型。</p><ol><li><p>创建超级用户</p><ul><li>(ll_env)file_dir$ <code>python manage.py createsuperuser</code></li></ul></li><li><p>向管理网站注册模型</p><ul><li>在file_dir/project_name_apps/admin.py中注册自定义的模型。<ul><li>admin.site.register(model_name)</li></ul></li><li>访问 <a href="http://loaclhost:8000/admin/" target="_blank" rel="noopener">http://loaclhost:8000/admin/</a> ,用刚注册的超级用户账号登陆，进入管理界面。</li></ul></li><li><p>添加主题</p><ul><li>可以在管理界面进行添加主题的操作。</li></ul></li></ol><h5 id="创建网页"><a href="#创建网页" class="headerlink" title="创建网页"></a>创建网页</h5><p>使用Django创建网页的过程通常分为三个阶段：定义URL、编写视图和编写模板。</p><ol><li><p>映射URL</p><ul><li>在file_dir/project_name/urls.py中的urlpatterns字段注册应用程序的URL信息。</li><li>在file_dir/project_name_apps/中创建另一个urls.py,在此文件中对应用程序的URL进行详细映射。</li></ul></li><li><p>编写视图</p><ul><li>视图函数接受请求中的信息，准备好生成网页所需的数据，再将这些数据发送给浏览器。</li><li>在file_dir/project_name_apps/views.py中编写视图函数。</li></ul></li><li><p>编写模板</p><ul><li>模板定义了网页的结构。模板指定了网页是什么样的，而每当网页被请求时，Django将填入相关的数据。模板能够访问视图提供的所有数据。</li><li>新建目录file_dir/project_name_apps/templates/project_name_apps/存放模板，在该目录下新建HTML格式的模板文件。</li></ul></li></ol><hr><p>完结撒花~撒花~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://pf1jz9eu0.bkt.clouddn.com/18-10-6/85076748.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;ψ(._. )&amp;gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Django入门&lt;/p&gt;
    
    </summary>
    
      <category term="修炼之道" scheme="https://qiu-ye.github.io/categories/%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="Python" scheme="https://qiu-ye.github.io/tags/Python/"/>
    
      <category term="Django" scheme="https://qiu-ye.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Python常用方法汇总</title>
    <link href="https://qiu-ye.github.io/2018/09/20/Python%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>https://qiu-ye.github.io/2018/09/20/Python常用方法汇总/</id>
    <published>2018-09-20T03:36:00.000Z</published>
    <updated>2018-10-06T09:19:29.722Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p><img src="http://pf1jz9eu0.bkt.clouddn.com/18-9-20/94654959.jpg" alt=""></p><p>ψ(._. )&gt;</p><hr><p>Python常用方法汇总</p><a id="more"></a><h3 id="Python常用方法汇总"><a href="#Python常用方法汇总" class="headerlink" title="Python常用方法汇总"></a>Python常用方法汇总</h3><h4 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h4><table><thead><tr><th style="text-align:left">函数名</th><th style="text-align:left">执行操作</th></tr></thead><tbody><tr><td style="text-align:left">capitalize()</td><td style="text-align:left">把字符串的第一个字符改为大写</td></tr><tr><td style="text-align:left">casefold()</td><td style="text-align:left">把整个字符串的所有字符改为小写</td></tr><tr><td style="text-align:left">center(width)</td><td style="text-align:left">将字符串居中，并使用空格填充至长度 width 的新字符串</td></tr><tr><td style="text-align:left">count(sub[,   start[, end]])</td><td style="text-align:left">返回 sub 在字符串里边出现的次数，start 和 end 参数表示范围，可选。</td></tr><tr><td style="text-align:left">encode(encoding=’utf-8’,   errors=’strict’)</td><td style="text-align:left">以 encoding 指定的编码格式对字符串进行编码。</td></tr><tr><td style="text-align:left">endswith(sub[,   start[, end]])</td><td style="text-align:left">检查字符串是否以 sub 子字符串结束，如果是返回 True，否则返回 False。start 和 end 参数表示范围，可选。</td></tr><tr><td style="text-align:left">expandtabs([tabsize=8])</td><td style="text-align:left">把字符串中的 tab 符号（\t）转换为空格，如不指定参数，默认的空格数是 tabsize=8。</td></tr><tr><td style="text-align:left">find(sub[,   start[, end]])</td><td style="text-align:left">检测 sub 是否包含在字符串中，如果有则返回索引值，否则返回 -1，start 和 end 参数表示范围，可选。</td></tr><tr><td style="text-align:left">index(sub[,   start[, end]])</td><td style="text-align:left">跟 find 方法一样，不过如果 sub 不在 string 中会产生一个异常。</td></tr><tr><td style="text-align:left">isalnum()</td><td style="text-align:left">如果字符串至少有一个字符并且所有字符都是字母或数字则返回 True，否则返回 False。</td></tr><tr><td style="text-align:left">isalpha()</td><td style="text-align:left">如果字符串至少有一个字符并且所有字符都是字母则返回 True，否则返回 False。</td></tr><tr><td style="text-align:left">isdecimal()</td><td style="text-align:left">如果字符串只包含十进制数字则返回 True，否则返回 False。</td></tr><tr><td style="text-align:left">isdigit()</td><td style="text-align:left">如果字符串只包含数字则返回 True，否则返回 False。</td></tr><tr><td style="text-align:left">islower()</td><td style="text-align:left">如果字符串中至少包含一个区分大小写的字符，并且这些字符都是小写，则返回 True，否则返回 False。</td></tr><tr><td style="text-align:left">isnumeric()</td><td style="text-align:left">如果字符串中只包含数字字符，则返回 True，否则返回 False。</td></tr><tr><td style="text-align:left">isspace()</td><td style="text-align:left">如果字符串中只包含空格，则返回 True，否则返回 False。</td></tr><tr><td style="text-align:left">istitle()</td><td style="text-align:left">如果字符串是标题化（所有的单词都是以大写开始，其余字母均小写），则返回 True，否则返回 False。</td></tr><tr><td style="text-align:left">isupper()</td><td style="text-align:left">如果字符串中至少包含一个区分大小写的字符，并且这些字符都是大写，则返回 True，否则返回 False。</td></tr><tr><td style="text-align:left">join(sub)</td><td style="text-align:left">以字符串作为分隔符，插入到 sub 中所有的字符之间。</td></tr><tr><td style="text-align:left">ljust(width)</td><td style="text-align:left">返回一个左对齐的字符串，并使用空格填充至长度为 width 的新字符串。</td></tr><tr><td style="text-align:left">lower()</td><td style="text-align:left">转换字符串中所有大写字符为小写。</td></tr><tr><td style="text-align:left">lstrip()</td><td style="text-align:left">去掉字符串左边的所有空格</td></tr><tr><td style="text-align:left">partition(sub)</td><td style="text-align:left">找到子字符串 sub，把字符串分成一个 3 元组 (pre_sub, sub, fol_sub)，如果字符串中不包含 sub 则返回 (‘原字符串’, ‘’, ‘’)</td></tr><tr><td style="text-align:left">replace(old,   new[, count])</td><td style="text-align:left">把字符串中的 old 子字符串替换成 new 子字符串，如果 count 指定，则替换不超过 count 次。</td></tr><tr><td style="text-align:left">rfind(sub[,   start[, end]])</td><td style="text-align:left">类似于 find() 方法，不过是从右边开始查找。</td></tr><tr><td style="text-align:left">rindex(sub[,   start[, end]])</td><td style="text-align:left">类似于 index() 方法，不过是从右边开始。</td></tr><tr><td style="text-align:left">rjust(width)</td><td style="text-align:left">返回一个右对齐的字符串，并使用空格填充至长度为 width 的新字符串。</td></tr><tr><td style="text-align:left">rpartition(sub)</td><td style="text-align:left">类似于 partition() 方法，不过是从右边开始查找。</td></tr><tr><td style="text-align:left">rstrip()</td><td style="text-align:left">删除字符串末尾的空格。</td></tr><tr><td style="text-align:left">split(sep=None,   maxsplit=-1)</td><td style="text-align:left">不带参数默认是以空格为分隔符切片字符串，如果 maxsplit 参数有设置，则仅分隔 maxsplit 个子字符串，返回切片后的子字符串拼接的列表。</td></tr><tr><td style="text-align:left">splitlines(([keepends]))</td><td style="text-align:left">按照 ‘\n’ 分隔，返回一个包含各行作为元素的列表，如果 keepends 参数指定，则返回前 keepends 行。</td></tr><tr><td style="text-align:left">startswith(prefix[,   start[, end]])</td><td style="text-align:left">检查字符串是否以 prefix 开头，是则返回 True，否则返回 False。start 和 end 参数可以指定范围检查，可选。</td></tr><tr><td style="text-align:left">strip([chars])</td><td style="text-align:left">删除字符串前边和后边所有的空格，chars 参数可以定制删除的字符，可选。</td></tr><tr><td style="text-align:left">swapcase()</td><td style="text-align:left">翻转字符串中的大小写。</td></tr><tr><td style="text-align:left">title()</td><td style="text-align:left">返回标题化（所有的单词都是以大写开始，其余字母均小写）的字符串。</td></tr><tr><td style="text-align:left">translate(table)</td><td style="text-align:left">根据 table 的规则（可以由   str.maketrans(‘a’, ‘b’) 定制）转换字符串中的字符。</td></tr><tr><td style="text-align:left">upper()</td><td style="text-align:left">转换字符串中的所有小写字符为大写。</td></tr><tr><td style="text-align:left">zfill(width)</td><td style="text-align:left">返回长度为 width 的字符串，原字符串右对齐，前边用 0 填充。</td></tr></tbody></table><hr><h4 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h4><h5 id="文件打开模式"><a href="#文件打开模式" class="headerlink" title="文件打开模式"></a>文件打开模式</h5><table><thead><tr><th><strong>打开模式</strong></th><th><strong>执行操作</strong></th></tr></thead><tbody><tr><td>‘r’</td><td>以只读方式打开文件（默认）</td></tr><tr><td>‘w’</td><td>以写入的方式打开文件，会覆盖已存在的文件</td></tr><tr><td>‘x’</td><td>如果文件已经存在，使用此模式打开将引发异常</td></tr><tr><td>‘a’</td><td>以写入模式打开，如果文件存在，则在末尾追加写入</td></tr><tr><td>‘b’</td><td>以二进制模式打开文件</td></tr><tr><td>‘t’</td><td>以文本模式打开（默认）</td></tr><tr><td>‘+’</td><td>可读写模式（可添加到其他模式中使用）</td></tr><tr><td>‘U’</td><td>通用换行符支持</td></tr></tbody></table><h5 id="文件对象方法"><a href="#文件对象方法" class="headerlink" title="文件对象方法"></a>文件对象方法</h5><table><thead><tr><th><strong>文件对象方法</strong></th><th><strong>执行操作</strong></th></tr></thead><tbody><tr><td>f.close()</td><td>关闭文件</td></tr><tr><td>f.read([size=-1])</td><td>从文件读取size个字符，当未给定size或给定负值的时候，读取剩余的所有字符，然后作为字符串返回</td></tr><tr><td>f.readline([size=-1])</td><td>从文件中读取并返回一行（包括行结束符），如果有size有定义则返回size个字符</td></tr><tr><td>f.write(str)</td><td>将字符串str写入文件</td></tr><tr><td>f.writelines(seq)</td><td>向文件写入字符串序列seq，seq应该是一个返回字符串的可迭代对象</td></tr><tr><td>f.seek(offset,   from)</td><td>在文件中移动文件指针，从from（0代表文件起始位置，1代表当前位置，2代表文件末尾）偏移offset个字节</td></tr><tr><td>f.tell()</td><td>返回当前在文件中的位置</td></tr><tr><td>f.truncate([size=file.tell()])</td><td>截取文件到size个字节，默认是截取到文件指针当前位置</td></tr></tbody></table><hr><h4 id="操作系统相关的文件、目录常用的函数"><a href="#操作系统相关的文件、目录常用的函数" class="headerlink" title="操作系统相关的文件、目录常用的函数"></a>操作系统相关的文件、目录常用的函数</h4><h5 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h5><table><thead><tr><th><strong>函数名</strong></th><th><strong>使用方法</strong></th></tr></thead><tbody><tr><td>getcwd()</td><td>返回当前工作目录</td></tr><tr><td>chdir(path)</td><td>改变工作目录</td></tr><tr><td>listdir(path=’.’)</td><td>列举指定目录中的文件名（’.’表示当前目录，’..’表示上一级目录）</td></tr><tr><td>mkdir(path)</td><td>创建单层目录，如该目录已存在抛出异常</td></tr><tr><td>makedirs(path)</td><td>递归创建多层目录，如该目录已存在抛出异常，注意：’E:\a\b’和’E:\a\c’并不会冲突</td></tr><tr><td>remove(path)</td><td>删除文件</td></tr><tr><td>rmdir(path)</td><td>删除单层目录，如该目录非空则抛出异常</td></tr><tr><td>removedirs(path)</td><td>递归删除目录，从子目录到父目录逐层尝试删除，遇到目录非空则抛出异常</td></tr><tr><td>rename(old,   new)</td><td>将文件old重命名为new</td></tr><tr><td>system(command)</td><td>运行系统的shell命令</td></tr><tr><td>walk(top)</td><td>遍历top路径以下所有的子目录，返回一个三元组：(路径, [包含目录], [包含文件])【具体实现方案请看：第30讲课后作业^_^】</td></tr><tr><td><em>以下是支持路径操作中常用到的一些定义，支持所有平台</em></td><td></td></tr><tr><td>os.curdir</td><td>指代当前目录（’.’）</td></tr><tr><td>os.pardir</td><td>指代上一级目录（’..’）</td></tr><tr><td>os.sep</td><td>输出操作系统特定的路径分隔符（Win下为’\‘，Linux下为’/‘）</td></tr><tr><td>os.linesep</td><td>当前平台使用的行终止符（Win下为’\r\n’，Linux下为’\n’）</td></tr><tr><td>os.name</td><td>指代当前使用的操作系统（包括：’posix’,  ‘nt’, ‘mac’,   ‘os2’, ‘ce’, ‘java’）</td></tr></tbody></table><h5 id="os-path模块"><a href="#os-path模块" class="headerlink" title="os.path模块"></a>os.path模块</h5><table><thead><tr><th><strong>函数名</strong></th><th><strong>使用方法</strong></th></tr></thead><tbody><tr><td>basename(path)</td><td>去掉目录路径，单独返回文件名</td></tr><tr><td>dirname(path)</td><td>去掉文件名，单独返回目录路径</td></tr><tr><td>join(path1[,   path2[, …]])</td><td>将path1, path2各部分组合成一个路径名</td></tr><tr><td>split(path)</td><td>分割文件名与路径，返回(f_path, f_name)元组。如果完全使用目录，它也会将最后一个目录作为文件名分离，且不会判断文件或者目录是否存在</td></tr><tr><td>splitext(path)</td><td>分离文件名与扩展名，返回(f_name, f_extension)元组</td></tr><tr><td>getsize(file)</td><td>返回指定文件的尺寸，单位是字节</td></tr><tr><td>getatime(file)</td><td>返回指定文件最近的访问时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</td></tr><tr><td>getctime(file)</td><td>返回指定文件的创建时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</td></tr><tr><td>getmtime(file)</td><td>返回指定文件最新的修改时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</td></tr><tr><td><em>以下为函数返回</em> <em>True</em> <em>或</em> <em>False</em></td><td></td></tr><tr><td>exists(path)</td><td>判断指定路径（目录或文件）是否存在</td></tr><tr><td>isabs(path)</td><td>判断指定路径是否为绝对路径</td></tr><tr><td>isdir(path)</td><td>判断指定路径是否存在且是一个目录</td></tr><tr><td>isfile(path)</td><td>判断指定路径是否存在且是一个文件</td></tr><tr><td>islink(path)</td><td>判断指定路径是否存在且是一个符号链接</td></tr><tr><td>ismount(path)</td><td>判断指定路径是否存在且是一个挂载点</td></tr><tr><td>samefile(path1,   paht2)</td><td>判断path1和path2两个路径是否指向同一个文件</td></tr></tbody></table><hr><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><h5 id="标准异常"><a href="#标准异常" class="headerlink" title="标准异常"></a>标准异常</h5><table><thead><tr><th>异常类型</th><th>含义</th></tr></thead><tbody><tr><td>AssertionError</td><td>断言语句（assert）失败</td></tr><tr><td>AttributeError</td><td>尝试访问未知的对象属性</td></tr><tr><td>EOFError</td><td>用户输入文件末尾标志EOF（Ctrl+d）</td></tr><tr><td>FloatingPointError</td><td>浮点计算错误</td></tr><tr><td>GeneratorExit</td><td>generator.close()方法被调用的时候</td></tr><tr><td>ImportError</td><td>导入模块失败的时候</td></tr><tr><td>IndexError</td><td>索引超出序列的范围</td></tr><tr><td>KeyError</td><td>字典中查找一个不存在的关键字</td></tr><tr><td>KeyboardInterrupt</td><td>用户输入中断键（Ctrl+c）</td></tr><tr><td>MemoryError</td><td>内存溢出（可通过删除对象释放内存）</td></tr><tr><td>NameError</td><td>尝试访问一个不存在的变量</td></tr><tr><td>NotImplementedError</td><td>尚未实现的方法</td></tr><tr><td>OSError</td><td>操作系统产生的异常（例如打开一个不存在的文件）</td></tr><tr><td>OverflowError</td><td>数值运算超出最大限制</td></tr><tr><td>ReferenceError</td><td>弱引用（weak reference）试图访问一个已经被垃圾回收机制回收了的对象</td></tr><tr><td>RuntimeError</td><td>一般的运行时错误</td></tr><tr><td>StopIteration</td><td>迭代器没有更多的值</td></tr><tr><td>SyntaxError</td><td>Python的语法错误</td></tr><tr><td>IndentationError</td><td>缩进错误</td></tr><tr><td>TabError</td><td>Tab和空格混合使用</td></tr><tr><td>SystemError</td><td>Python编译器系统错误</td></tr><tr><td>SystemExit</td><td>Python编译器进程被关闭</td></tr><tr><td>TypeError</td><td>不同类型间的无效操作</td></tr><tr><td>UnboundLocalError</td><td>访问一个未初始化的本地变量（NameError的子类）</td></tr><tr><td>UnicodeError</td><td>Unicode相关的错误（ValueError的子类）</td></tr><tr><td>UnicodeEncodeError</td><td>Unicode编码时的错误（UnicodeError的子类）</td></tr><tr><td>UnicodeDecodeError</td><td>Unicode解码时的错误（UnicodeError的子类）</td></tr><tr><td>UnicodeTranslateError</td><td>Unicode转换时的错误（UnicodeError的子类）</td></tr><tr><td>ValueError</td><td>传入无效的参数</td></tr><tr><td>ZeroDivisionError</td><td>除数为零</td></tr></tbody></table><h5 id="内置异常类的层次结构"><a href="#内置异常类的层次结构" class="headerlink" title="内置异常类的层次结构"></a>内置异常类的层次结构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">BaseException</span><br><span class="line">+-- SystemExit</span><br><span class="line">+-- KeyboardInterrupt</span><br><span class="line">+-- GeneratorExit</span><br><span class="line">+-- Exception</span><br><span class="line">      +-- StopIteration</span><br><span class="line">      +-- ArithmeticError</span><br><span class="line">      |    +-- FloatingPointError</span><br><span class="line">      |    +-- OverflowError</span><br><span class="line">      |    +-- ZeroDivisionError</span><br><span class="line">      +-- AssertionError</span><br><span class="line">      +-- AttributeError</span><br><span class="line">      +-- BufferError</span><br><span class="line">      +-- EOFError</span><br><span class="line">      +-- ImportError</span><br><span class="line">      +-- LookupError</span><br><span class="line">      |    +-- IndexError</span><br><span class="line">      |    +-- KeyError</span><br><span class="line">      +-- MemoryError</span><br><span class="line">      +-- NameError</span><br><span class="line">      |    +-- UnboundLocalError</span><br><span class="line">      +-- OSError</span><br><span class="line">      |    +-- BlockingIOError</span><br><span class="line">      |    +-- ChildProcessError</span><br><span class="line">      |    +-- ConnectionError</span><br><span class="line">      |    |    +-- BrokenPipeError</span><br><span class="line">      |    |    +-- ConnectionAbortedError</span><br><span class="line">      |    |    +-- ConnectionRefusedError</span><br><span class="line">      |    |    +-- ConnectionResetError</span><br><span class="line">      |    +-- FileExistsError</span><br><span class="line">      |    +-- FileNotFoundError</span><br><span class="line">      |    +-- InterruptedError</span><br><span class="line">      |    +-- IsADirectoryError</span><br><span class="line">      |    +-- NotADirectoryError</span><br><span class="line">      |    +-- PermissionError</span><br><span class="line">      |    +-- ProcessLookupError</span><br><span class="line">      |    +-- TimeoutError</span><br><span class="line">      +-- ReferenceError</span><br><span class="line">      +-- RuntimeError</span><br><span class="line">      |    +-- NotImplementedError</span><br><span class="line">      +-- SyntaxError</span><br><span class="line">      |    +-- IndentationError</span><br><span class="line">      |         +-- TabError</span><br><span class="line">      +-- SystemError</span><br><span class="line">      +-- TypeError</span><br><span class="line">      +-- ValueError</span><br><span class="line">      |    +-- UnicodeError</span><br><span class="line">      |         +-- UnicodeDecodeError</span><br><span class="line">      |         +-- UnicodeEncodeError</span><br><span class="line">      |         +-- UnicodeTranslateError</span><br><span class="line">      +-- Warning</span><br><span class="line">           +-- DeprecationWarning</span><br><span class="line">           +-- PendingDeprecationWarning</span><br><span class="line">           +-- RuntimeWarning</span><br><span class="line">           +-- SyntaxWarning</span><br><span class="line">           +-- UserWarning</span><br><span class="line">           +-- FutureWarning</span><br><span class="line">           +-- ImportWarning</span><br><span class="line">           +-- UnicodeWarning</span><br><span class="line">           +-- BytesWarning</span><br><span class="line">           +-- ResourceWarning</span><br></pre></td></tr></table></figure><hr><p>完结撒花~撒花~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://pf1jz9eu0.bkt.clouddn.com/18-9-20/94654959.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;ψ(._. )&amp;gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Python常用方法汇总&lt;/p&gt;
    
    </summary>
    
      <category term="修炼之道" scheme="https://qiu-ye.github.io/categories/%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="Python" scheme="https://qiu-ye.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>面试相关问题汇总</title>
    <link href="https://qiu-ye.github.io/2018/09/15/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://qiu-ye.github.io/2018/09/15/面试相关问题汇总/</id>
    <published>2018-09-15T04:18:00.000Z</published>
    <updated>2018-09-20T04:20:59.081Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p><img src="http://pf1jz9eu0.bkt.clouddn.com/18-9-20/55145345.jpg" alt=""></p><p>ψ(._. )&gt;</p><hr><p>面试相关问题汇总</p><a id="more"></a><h3 id="面试相关问题汇总"><a href="#面试相关问题汇总" class="headerlink" title="面试相关问题汇总"></a>面试相关问题汇总</h3><ul><li>网络部分：<a href="https://github.com/Qiu-Ye/InterviewFAQ-network" target="_blank" rel="noopener">InterviewFAQ-network</a></li><li>数据库部分：<a href="https://github.com/Qiu-Ye/InterviewFAQ-database" target="_blank" rel="noopener">InterviewFAQ-database</a></li><li>Linux&amp;Shell&amp;操作系统部分：<a href="https://github.com/Qiu-Ye/InterviewFAQ-Linux" target="_blank" rel="noopener">InterviewFAQ-Linux</a></li><li>Python部分：<a href="https://github.com/Qiu-Ye/InterviewFAQ-python" target="_blank" rel="noopener">InterviewFAQ-python</a></li><li>Web开源组件部分：<a href="https://github.com/Qiu-Ye/InterviewFAQ-WebOpenSourceComponent" target="_blank" rel="noopener">InterviewFAQ-WebOpenSourceComponent</a></li></ul><p><strong>内容会持续更新，想第一时间看到更新，欢迎 <a href="https://github.com/Qiu-Ye" target="_blank" rel="noopener">Follow</a> ！</strong>。</p><hr><p>完结撒花~撒花~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://pf1jz9eu0.bkt.clouddn.com/18-9-20/55145345.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;ψ(._. )&amp;gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;面试相关问题汇总&lt;/p&gt;
    
    </summary>
    
      <category term="修炼之道" scheme="https://qiu-ye.github.io/categories/%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="面试" scheme="https://qiu-ye.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>关于合作</title>
    <link href="https://qiu-ye.github.io/2018/09/15/%E5%85%B3%E4%BA%8E%E5%90%88%E4%BD%9C/"/>
    <id>https://qiu-ye.github.io/2018/09/15/关于合作/</id>
    <published>2018-09-15T04:01:00.000Z</published>
    <updated>2018-09-15T04:09:01.293Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p><center>请求原谅比获取许可更容易。</center>     </p><p align="right">—— 海军少将Grace Hopper博士</p><p>ψ(._. )&gt;</p><hr><p>有些情况下，你也许确切地知道需要做什么，以及怎样去做。</p><p>整个系统就在你的眼前——你知道它是对的。但请求许可去处理整个事情，你会遇到拖延和漠然。大家要设立委员会，预算需要批准，事情会变得复杂化。每个人都会护卫他们自己的资源。</p><a id="more"></a><p>这时候设计出你合理要求的东西，好好开发它。</p><p>一旦完成，就拿给大家看，让他们大吃一惊。</p><p>然后说：“要是我们增加……可能就会更好。”</p><p>假装那并不重要。</p><p>坐回椅子上，等着他们要你增加你本来就想要的功能。</p><p>人们发现，<strong>参与正在发生的成功要更容易</strong>。</p><p><strong>让他们瞥见未来，你就能让他们聚集在你周围</strong>。</p><hr><p>完结撒花~撒花~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h3&gt;&lt;p&gt;&lt;center&gt;请求原谅比获取许可更容易。&lt;/center&gt;     &lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;—— 海军少将Grace Hopper博士&lt;/p&gt;

&lt;p&gt;ψ(._. )&amp;gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;有些情况下，你也许确切地知道需要做什么，以及怎样去做。&lt;/p&gt;
&lt;p&gt;整个系统就在你的眼前——你知道它是对的。但请求许可去处理整个事情，你会遇到拖延和漠然。大家要设立委员会，预算需要批准，事情会变得复杂化。每个人都会护卫他们自己的资源。&lt;/p&gt;
    
    </summary>
    
      <category term="修炼之道" scheme="https://qiu-ye.github.io/categories/%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="合作" scheme="https://qiu-ye.github.io/tags/%E5%90%88%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>和大神打交道的礼节与教养</title>
    <link href="https://qiu-ye.github.io/2018/09/15/%E5%92%8C%E5%A4%A7%E7%A5%9E%E6%89%93%E4%BA%A4%E9%81%93%E7%9A%84%E7%A4%BC%E8%8A%82%E4%B8%8E%E6%95%99%E5%85%BB/"/>
    <id>https://qiu-ye.github.io/2018/09/15/和大神打交道的礼节与教养/</id>
    <published>2018-09-15T01:55:00.000Z</published>
    <updated>2018-09-15T03:04:38.383Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>吾尝终日而思矣，不如须臾之所学也。吾尝跂而望矣，不如登高之博见也。登高而招，臂非加长也，而见者远。顺风而呼，声非加疾也，而闻者彰。假舆马者，非利足也，而致千里。假舟楫者，非能水也，而绝江河。君子生非异也，善假于物也。</p><p>ψ(._. )&gt;</p><hr><p>谁都渴望有一天能被大神指点，让自己的技艺和思想高度突飞猛进。但和大神打交道时，一定要注意礼节与教养。永远不要忘记，只有尊重别人的人才配得到别人的尊重。</p><a id="more"></a><h3 id="指导方针"><a href="#指导方针" class="headerlink" title="指导方针"></a>指导方针</h3><ul><li>确切地知道你想要问什么，并尽量明确具体。</li></ul><ul><li>小心而得体地组织你的问题。<ul><li>记住你是在请求帮助。</li><li>不要显得好像是在要求对方回答。</li></ul></li></ul><ul><li>组织好问题之后，停下来，再找找答案。<ul><li>选出一些关键字，先试着从网上搜索一下（百度不到的东西，可以试一下Google）。</li><li>查找适当的常见问题解答列表。</li></ul></li></ul><ul><li>决定你是想公开提问还是私下提问。<ul><li>不管通过什么方式（邮件/论坛留言/私信……），要使用有意义的主题。</li></ul></li></ul><ul><li>耐心等候。<ul><li>大神往往都很忙。</li><li>没有人有义务每天等着回答你的问题（除非你使用付费咨询服务）。</li></ul></li></ul><ul><li>最后请一定要感谢任何回应你的人。<ul><li>对帮助你的人表示感谢是每个受教育的人所学的第一课。</li></ul></li></ul><ul><li>如果你看到有人提出你能够解答的问题，尽你的一份力，参与解答。<ul><li>首先，为别人讲解知识点是加深理解的最好学习方式。</li><li>其次，保持这一习惯，终有一天，你也可以成为大神。</li></ul></li></ul><hr><p>完结撒花~撒花~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h3&gt;&lt;p&gt;吾尝终日而思矣，不如须臾之所学也。吾尝跂而望矣，不如登高之博见也。登高而招，臂非加长也，而见者远。顺风而呼，声非加疾也，而闻者彰。假舆马者，非利足也，而致千里。假舟楫者，非能水也，而绝江河。君子生非异也，善假于物也。&lt;/p&gt;
&lt;p&gt;ψ(._. )&amp;gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;谁都渴望有一天能被大神指点，让自己的技艺和思想高度突飞猛进。但和大神打交道时，一定要注意礼节与教养。永远不要忘记，只有尊重别人的人才配得到别人的尊重。&lt;/p&gt;
    
    </summary>
    
      <category term="修炼之道" scheme="https://qiu-ye.github.io/categories/%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="教养" scheme="https://qiu-ye.github.io/tags/%E6%95%99%E5%85%BB/"/>
    
      <category term="尊重" scheme="https://qiu-ye.github.io/tags/%E5%B0%8A%E9%87%8D/"/>
    
      <category term="如何提问" scheme="https://qiu-ye.github.io/tags/%E5%A6%82%E4%BD%95%E6%8F%90%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>关于投资</title>
    <link href="https://qiu-ye.github.io/2018/09/15/%E5%85%B3%E4%BA%8E%E6%8A%95%E8%B5%84/"/>
    <id>https://qiu-ye.github.io/2018/09/15/关于投资/</id>
    <published>2018-09-15T01:39:00.000Z</published>
    <updated>2018-09-15T01:54:29.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>所知道的不同的事情越多，你就越有价值。</p><p>ψ(._. )&gt;</p><hr><p>以下的指导方针不只适用于经济资产的投资，同样适用于职业生涯中知识资产的投资。其中的理念和智慧甚至可以扩展至整个人生。</p><a id="more"></a><h3 id="指导方针"><a href="#指导方针" class="headerlink" title="指导方针"></a>指导方针</h3><ol><li>严肃的投资者定期投资——作为习惯</li><li>多元化是长期成功的关键</li><li>聪明的投资者在保守的投资和高风险、高回报的投资之间平衡他们的资产</li><li>投资者设法低买高卖，以获取最大回报</li><li>应周期性地重新评估和平衡资产</li></ol><hr><p>完结撒花~撒花~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h3&gt;&lt;p&gt;所知道的不同的事情越多，你就越有价值。&lt;/p&gt;
&lt;p&gt;ψ(._. )&amp;gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以下的指导方针不只适用于经济资产的投资，同样适用于职业生涯中知识资产的投资。其中的理念和智慧甚至可以扩展至整个人生。&lt;/p&gt;
    
    </summary>
    
      <category term="修炼之道" scheme="https://qiu-ye.github.io/categories/%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="投资" scheme="https://qiu-ye.github.io/tags/%E6%8A%95%E8%B5%84/"/>
    
      <category term="理财" scheme="https://qiu-ye.github.io/tags/%E7%90%86%E8%B4%A2/"/>
    
      <category term="人生智慧" scheme="https://qiu-ye.github.io/tags/%E4%BA%BA%E7%94%9F%E6%99%BA%E6%85%A7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Admin Plugin </title>
    <link href="https://qiu-ye.github.io/2018/09/14/Hexo-admin/"/>
    <id>https://qiu-ye.github.io/2018/09/14/Hexo-admin/</id>
    <published>2018-09-14T07:25:00.000Z</published>
    <updated>2018-09-15T01:32:59.450Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p><img src="http://pf1jz9eu0.bkt.clouddn.com/18-9-14/44097574.jpg" alt=""></p><p>发现了一个绝妙的Hexo博客管理工具<a href="https://jaredforsyth.com/hexo-admin/" target="_blank" rel="noopener">Hexo-Admin</a>，可以在浏览器上对博客内容和设置进行更新修改。</p><p>ψ(._. )&gt;</p><hr><p>Hexo Admin Plugin</p><a id="more"></a><h3 id="Hexo-Admin-Plugin"><a href="#Hexo-Admin-Plugin" class="headerlink" title="Hexo Admin Plugin"></a>Hexo Admin Plugin</h3><h4 id="功能预览"><a href="#功能预览" class="headerlink" title="功能预览"></a>功能预览</h4><ul><li><p>博客内容的管理</p><ul><li><p>点击左边的大纲栏，可以直接对博客内容进行预览</p><p><img src="http://pf1jz9eu0.bkt.clouddn.com/18-9-14/38787645.jpg" alt=""></p><ul><li><p>点击文章名字的链接，可以查看文章部署后的效果</p><p><img src="http://pf1jz9eu0.bkt.clouddn.com/18-9-14/85933672.jpg" alt=""></p></li><li><p>点击铅笔形状的图标，进入编辑界面，在浏览器上实现文字的编辑和Markdown实时预览</p></li></ul><p><img src="http://pf1jz9eu0.bkt.clouddn.com/18-9-14/87793697.jpg" alt=""></p><ul><li>通过编写<code>提交脚本</code>实现自动化提交</li></ul><p><img src="http://pf1jz9eu0.bkt.clouddn.com/18-9-14/66826154.jpg" alt=""></p></li></ul></li></ul><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><ol><li><p>初始化Hexo &amp; 创建一个博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line">cd ~/</span><br><span class="line">hexo init my-blog</span><br><span class="line">cd my-blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>安装Hexo Admin Plugin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br><span class="line">hexo server -d</span><br></pre></td></tr></table></figure></li><li><p>在浏览器中打开<code>http://localhost:4000/admin/</code>，即可看到Hexo Admin的界面</p></li></ol><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><p>设置界面见<code>Settings</code>界面</p><p><img src="http://pf1jz9eu0.bkt.clouddn.com/18-9-14/32190978.jpg" alt=""></p></li><li><p>更详细的参考文档见</p><ul><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo site</a></li><li><a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">Github page for this plugin</a></li></ul></li></ul><hr><p>完结撒花~撒花~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://pf1jz9eu0.bkt.clouddn.com/18-9-14/44097574.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;发现了一个绝妙的Hexo博客管理工具&lt;a href=&quot;https://jaredforsyth.com/hexo-admin/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo-Admin&lt;/a&gt;，可以在浏览器上对博客内容和设置进行更新修改。&lt;/p&gt;
&lt;p&gt;ψ(._. )&amp;gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hexo Admin Plugin&lt;/p&gt;
    
    </summary>
    
      <category term="磨刀不误砍柴工" scheme="https://qiu-ye.github.io/categories/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/"/>
    
    
      <category term="工具" scheme="https://qiu-ye.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Linux开机启动流程</title>
    <link href="https://qiu-ye.github.io/2018/04/04/Linux%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>https://qiu-ye.github.io/2018/04/04/Linux开机启动流程/</id>
    <published>2018-04-04T03:36:00.000Z</published>
    <updated>2018-09-15T04:14:53.118Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180404111232284.png" alt=""></p><p>ψ(._. )&gt;</p><hr><p>Linux系统开机流程</p><a id="more"></a><h3 id="Linux系统开机流程："><a href="#Linux系统开机流程：" class="headerlink" title="Linux系统开机流程："></a>Linux系统开机流程：</h3><h4 id="BIOS：Basic-Input-Output-System"><a href="#BIOS：Basic-Input-Output-System" class="headerlink" title="BIOS：Basic Input Output System"></a>BIOS：Basic Input Output System</h4><p>电源开启，首先登场的是BIOS，即标准输入输出系统，它是电脑最开始执行的程序。它将执行以下步骤：</p><ul><li>读取CMOS中的信息：了解计算机的硬件情况。例如：<ul><li>CPU的总线时钟</li><li>启动设备的搜索顺序</li><li>硬盘大小与型号</li><li>系统时间</li><li>即插即用设备</li><li>各设备的IO地址</li><li>中断请求等……</li></ul></li><li>POST：加电自检。例如：<ul><li>确定可用的内存</li><li>确定时钟速度等……</li></ul></li><li>对硬件进行初始化，设定即插即用设备。<ul><li>有过重装系统经验的同学，会对此步骤有深切的理解。</li><li>重装系统或者需要使用WinPE工具时，要把制作好的U盘启动盘在开机之前插入USB口。</li><li>U盘启动盘此时即作为即插即用设备被识别、读取和设定。</li></ul></li><li>BOOT Sequence：按次序查找引导设备。<ul><li>第一个有引导程序的设备即为本次启动要用到的设备。</li><li>系统默认的启动顺序中本地硬盘通常是最靠前的，而BIOS会总是启动第一个有引导程序的设备。</li><li>因此，如果想加载启动U盘或者光盘中的系统，就要调整其启动顺序排在本地硬盘前面。</li></ul></li><li>从启动设备中读取MBR，并将控制权移交给MBR中的程序。</li></ul><h4 id="MBR：Master-Boot-Reord-主引导记录区"><a href="#MBR：Master-Boot-Reord-主引导记录区" class="headerlink" title="MBR：Master Boot Reord 主引导记录区"></a>MBR：Master Boot Reord 主引导记录区</h4><p>主引导记录区是位于整个硬盘的0磁道0柱面的第一个扇区，只有512个字节，它是由引导加载代码区、磁盘分区表和引导记录标识组成。</p><ul><li>引导加载代码区（Master Boot Code）：<ul><li>只有446字节大小</li><li>用于存放引导加载程序，即Bootloader，也就是说Bootloader能使用的最大空间为446字节。</li></ul></li><li>磁盘分区表（Disk Partition Table）:<ul><li>共有64字节大小</li><li>每个分区需要16个字节描述，硬盘分区表只能描述4个主分区，因此一块磁盘最多只有4个主分区。</li><li>如果需要更多分区就要将一个（或多个）主分区作为扩展分区。</li><li>要注意的是扩展分区是不能直接用作存储的，扩展分区也是主分区的一种，它必须至少包含一个逻辑分区，逻辑分区可以直接用于存储。</li></ul></li><li>引导记录标识（Boot Record ID）:<ul><li>2字节大小</li><li>0x55AA</li></ul></li></ul><p>这里面最重要当属Bootloader——引导加载器，它是在操作系统内核运行之前运行的一小段程序，负责将操作系统内核装入内存，然后将计算机控制权交给操作系统。Windows系统使用的BootLoader叫做ntloader。早期的Linux发行版上，普遍采用的Bootloader是LILO（LInux LOader），后来GRUB诞生了，以其强大的功能毫不留情地代替了LILO的位置。目前使用最广泛的GRUB（GRand Uniform Bootloader）全称应该是是GNU GRUB，现在已经更新到第二代，需要注意的是GRUB2相较于GRUB几乎完全重写，其优势主要表现在以下几点：</p><ol><li>GRUB是动态可配置的。</li><li>GRUB提供菜单供用户选择要启动的操作系统。</li><li>GRUB支持操作系统非常广泛。不但支持所有的Liunx，还能通过链式启动功能支持Windows和OS/2。</li><li>GRUB具有多种形式的用户界面。支持图形界面，能提供带有漂亮背景的启动菜单</li><li>GRUB拥有丰富的控制台命令与用户交互。</li><li>GRUB可以从镜像文件中启动操作系统。</li><li>GRUB支持链式启动。</li><li>GRUB支持多种语言，包括中文。</li></ol><p>GRUB使用三段式引导启动，引导流程如下：</p><ul><li>第一段：位于MBR中的Bootloader区，此阶段产生一个名为<strong>stage1</strong>的文件</li><li>第二段：位于紧接在MBR后面的位置，大概30K左右的代码，主要是文件系统的驱动程序，目的是找到第三段生成的主功能代码文件，此阶段产生一个名为<strong>stage1_5</strong>的文件。</li><li>第三段：位于磁盘上，位置不确定，放置GRUB的主功能代码，用于实现GRUB支持的所有功能，此阶段产生一个名为<strong>stage2</strong>的文件。</li></ul><p>GRUB2使用四段式引导启动,要求必须提供1M的空白空间用于存放其核心代码，位置不限但必须位于2T空间以内，引导流程如下：</p><ul><li>第一段：位于MBR中的Bootloader区，此阶段代码文件名为<strong>boot.img</strong></li><li>第二段：位于存放GRUB2核心文件core.img的第一个扇区，大小为512字节，作用是将核心文件core.img余下的部分读入内存，此阶段代码文件名为<strong>diskboot.img</strong></li><li>第三段：加载GRUB2的内核模块</li><li>第四段：启动操作界面，供用户选择需要启动的操作系统。</li></ul><p>用户在GRUB的操作界面不仅可以选择要启动的内核或操作系统，还可以传递给内核启动参数，之后，就开始加载用户选择的内核或操作系统。</p><h4 id="Kernel：加载内核"><a href="#Kernel：加载内核" class="headerlink" title="Kernel：加载内核"></a>Kernel：加载内核</h4><p>内核镜像通常为bzImage的压缩格式，被加载到内存后先要进行自解压，之后跳转到startup_32函数。<br>startup_32函数的执行代表着Linux第一个进程的开始，进行一番整理操作后便跳到Linux内核的主函数start_kernel。<br>start_kernel函数执行过程中大部分时间都在为Linux内核准备必要的数据结构，以保证子模块的正常运行。完成数据结构初始化后，start_kernel会创建一个名为kernel_init的内核进程，然后进入死循环cpu_idle函数中（此进程的PID为0，主要工作就是调用CPU的idle指令，让CPU降温且省电）。<br>kernel_init的主要工作有以下几点：</p><ul><li>给硬件加载驱动程序</li><li>初始化网络堆栈</li><li>在多CPU的系统中让其他CPU开始工作</li><li>寻找并以只读方式挂载用户指定的根文件系统</li><li>当一切准备工作完成后，kernel_init会调用用户空间的第一个进程——/sbin/init。</li></ul><p>需要注意的是在加载硬件驱动的时候，有可能会借助于ramdisk加载驱动，这一过程在CentOS 5和CentOS 6中体现为不同的流程。CentOS 5中的ramdisk可能会被缓存两次，在CentOS 6中改为文件系统ramfs。</p><ul><li>CentOS 5：initrd，initrd在内存中开辟一块模拟的磁盘空间，Linux内核启动后，先将这个模拟的磁盘当作根文件系统，并执行initrd中的/linuxrc文件，开始加载那些内核要访问的真正的根文件系统所必需的驱动并挂接真正的根文件系统。之后从根分区中启动init进程</li><li>CentOS 6：initramfs，initramfs是一个使用gzip压缩的cpio打包文件。Linux内核将它的内容装入tmpfs，这就不需要附带任何文件驱动就能工作，并且tmpfs支持动态扩展。之后，initramfs直接启动init进程。根分区中的init程序作为备份，在没有initramfs的时候，内核才会挂接分区去找它。</li></ul><h4 id="init："><a href="#init：" class="headerlink" title="init："></a>init：</h4><p>init进程的执行基本标志着开机流程走到了最后一站，init进程会根据用户设定的运行级别对Linux系统进行一系列的初始化操作。比如：启动对应运行级别的服务进程、配置网络、继续为某些硬件加载驱动程序、运行相关软件等。但init进程不单单是做初始化，从系统的启动，一直到关机，init都在守护着系统的运行。随着技术的迭代，init程序在历史上有着许多个不同的身份：</p><ul><li>SysV：init，CentOS 5及之前的版本<ul><li>配置文件：/etc/inittab</li><li>流程：<ul><li>/sbin/init –&gt; (/etc/inittab) –&gt; 设置默认运行级别 –&gt; 运行系统初始化脚本、完成系统初始化（/etc/rc.d/rc.sysinit） –&gt; 关闭对应的需要关闭的服务，启动需要启动的服务 –&gt; 设置登陆终端</li></ul></li><li>系统初始化脚本：/etc/rc.d/rc.sysinit<ul><li>设置主机名</li><li>设置欢迎信息</li><li>激活udev和selinux</li><li>挂载/etc/fstab文件中定义的文件系统</li><li>检测根文件系统，并以读写方式重新挂载根文件系统</li><li>设置系统时钟</li><li>激活swap设备</li><li>根据/etc/sysctl.conf文件设置内核参数</li><li>激活lvm及software raid设备</li><li>加载额外设备的驱动程序</li><li>清理操作</li></ul></li></ul></li><li>Upstart：init，CentOS 6，支持并行启动<ul><li>配置文件：/etc/inittab，/etc/init/*.conf</li></ul></li><li>Systemd：systemd，CentOS 7，<ul><li>配置文件：/usr/lib/systemd/system，/etc/systemd/system</li><li>systemd新特性<ul><li>系统引导时实现服务并行启动</li><li>按需激活进程<ul><li>基于socket的激活机制，socket与服务程序分离</li><li>基于bus的激活机制</li><li>基于device的激活机制</li><li>基于path的激活机制</li></ul></li><li>系统状态快照<ul><li>保存各unit的当前状态信息于持久存储设备中</li><li>向后兼容sysv init脚本</li></ul></li><li>基于依赖关系定义服务控制逻辑</li></ul></li></ul></li></ul><hr><p>完结撒花~撒花~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180404111232284.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;ψ(._. )&amp;gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Linux系统开机流程&lt;/p&gt;
    
    </summary>
    
      <category term="系统运维" scheme="https://qiu-ye.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://qiu-ye.github.io/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://qiu-ye.github.io/tags/CentOS/"/>
    
      <category term="Grub" scheme="https://qiu-ye.github.io/tags/Grub/"/>
    
  </entry>
  
  <entry>
    <title>linux-3.10.67内核编译</title>
    <link href="https://qiu-ye.github.io/2018/03/09/linux-3-10-67%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/"/>
    <id>https://qiu-ye.github.io/2018/03/09/linux-3-10-67内核编译/</id>
    <published>2018-03-09T01:22:07.000Z</published>
    <updated>2018-03-09T01:51:06.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>The Kernel is the cornerstone！</p><hr><p><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-2018030909314328.png" alt="0"></p><a id="more"></a><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>以编译Linux-2.6.32-504内核参数设置为模板，进行linux-3.10.67内核编译。</p><h3 id="操作平台"><a href="#操作平台" class="headerlink" title="操作平台"></a>操作平台</h3><ul><li>VMware Workstation 8.0</li><li>CentOS 6.6<ul><li>Kernel：2.6.32-504.el6.x86_64</li></ul></li></ul><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>准备好开发环境<ul><li>包组（CentOS 6）<ul><li>Server Platform Development</li><li>Develop Tool</li></ul></li></ul></li><li>获取目标主机硬件设备的相关信息<ul><li>CPU：<ul><li>cat /proc/cpuinfo</li><li>x86info -a</li><li>lscpu</li></ul></li><li>PCI设备<ul><li>lspci</li><li>lsusb</li><li>hal-device：了解全部硬件设备信息</li></ul></li></ul></li><li>获取到目标主机系统功能的相关信息，例如要使用的文件系统</li><li>获取内核源代码包<ul><li>linux-3.10.67.tar.xz</li></ul></li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ul><li><code>tar xf linux-3.10.67.tar.xz -C /usr/src</code>：将源码解压至/usr/src</li><li><code>ln -sv /usr/src/linux-3.10.67 /usr/src/linux</code></li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180308145057627.png" alt="1"></li><li><code>cd /usr/src/linux</code>：进入源码目录</li><li><code>cp /boot/config-2.6.32-504.el6.x86_64 .config</code>：复制现有的系统内核配置文件作为模板备用</li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180308145648842.png" alt="2"></li><li><code>make menuconfig</code>：启动图形界面配置内核参数，按照需求安装<ul><li>如果报错，则需安装ncurses：<code>yum install ncurses-devel.x86_64</code></li></ul></li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180308214218106.png" alt=""></li><li><code>screen</code>：开启一个虚拟屏幕，以防止编译过程中ssh断开连接，导致编译失败<ul><li><code>Ctrl+a，d</code>快捷键可以切出虚拟屏幕，即使关闭ssh连接，屏幕中运行的编译任务仍不会断开</li><li><code>screen -ls</code>：列出正在运行的虚拟屏幕ID号</li><li><code>screen -r #</code>：重新呼出ID号为#的虚拟屏幕</li></ul></li><li><code>make -j #</code>：在虚拟屏幕下编译，采用多核编译可以缩短编译时间</li><li><code>make modules_install</code></li><li><code>make install</code></li><li>重启系统，并测试使用新内核</li><li>完结撒花~撒花~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h3&gt;&lt;p&gt;The Kernel is the cornerstone！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-2018030909314328.png&quot; alt=&quot;0&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="系统运维" scheme="https://qiu-ye.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://qiu-ye.github.io/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://qiu-ye.github.io/tags/CentOS/"/>
    
      <category term="Kernel" scheme="https://qiu-ye.github.io/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>CentOS6.6安装Ohmyzsh时的报错问题</title>
    <link href="https://qiu-ye.github.io/2018/03/09/CentOS6.6%E5%AE%89%E8%A3%85Ohmyzsh%E6%97%B6%E7%9A%84%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
    <id>https://qiu-ye.github.io/2018/03/09/CentOS6.6安装Ohmyzsh时的报错问题/</id>
    <published>2018-03-09T01:10:00.000Z</published>
    <updated>2018-09-20T03:20:40.637Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>“oh-my-zsh is among the first things i install on any new machine I set up. It’s as necessary as the shell itself.”</p><hr><p>问：Liunx发行版安装完成后做的第一件事是什么？<br>答：当然是配置zsh+ohmysh。b(￣▽￣)d</p><a id="more"></a><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>解决CentOS 6.6 安装成功后，配置zsh+Ohmyzsh失败的问题。</p><h3 id="操作平台"><a href="#操作平台" class="headerlink" title="操作平台"></a>操作平台</h3><ul><li>VMware Workstation 8.0</li><li>CentOS 6.6<ul><li>Kernel：2.6.32-504.el6.x86_64</li></ul></li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ul><li><code>yum install zsh</code></li><li><code>chsh -s /bin/zsh</code></li><li><code>sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code><ul><li>报错：fatal: HTTP request failed</li><li>原因：CentOS 6.6 开机自带的git版本为1.7.1，版本过低</li><li>解决方法：将git升级为2.2.1版本<ul><li><code>yum remove git</code></li><li><code>wget https://github.com/git/git/archive/v2.2.1.tar.gz</code></li><li><code>tar zxvf v2.2.1.tar.gz</code></li><li><code>cd git-2.2.1</code></li><li><code>make configure</code></li><li><code>./configure --prefix=/usr/local/git --with-iconv=/usr/local/libiconv</code></li><li><code>make install</code></li><li><code>echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/bashrc</code></li><li><code>source /etc/bashrc</code></li><li><code>git --version</code></li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180308211910791.png" alt="1"></li></ul></li></ul></li><li><code>sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code><ul><li>报错：fatal: HTTP request failed</li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180308212054828.png" alt="2"></li><li>原因：nss需要更新</li><li>解决方法：更新nss<ul><li><code>yum update nss</code></li></ul></li></ul></li><li><code>sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></li><li>呼~终于不再报错了ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180308212433752.png" alt="3"></li><li>安装成功，完结撒花~撒花~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h3&gt;&lt;p&gt;“oh-my-zsh is among the first things i install on any new machine I set up. It’s as necessary as the shell itself.”&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;问：Liunx发行版安装完成后做的第一件事是什么？&lt;br&gt;答：当然是配置zsh+ohmysh。b(￣▽￣)d&lt;/p&gt;
    
    </summary>
    
      <category term="磨刀不误砍柴工" scheme="https://qiu-ye.github.io/categories/%E7%A3%A8%E5%88%80%E4%B8%8D%E8%AF%AF%E7%A0%8D%E6%9F%B4%E5%B7%A5/"/>
    
    
      <category term="Linux" scheme="https://qiu-ye.github.io/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://qiu-ye.github.io/tags/CentOS/"/>
    
      <category term="Zsh" scheme="https://qiu-ye.github.io/tags/Zsh/"/>
    
  </entry>
  
  <entry>
    <title>使用GRUB工具修复被损坏的MBR</title>
    <link href="https://qiu-ye.github.io/2018/03/08/%E4%BD%BF%E7%94%A8GRUB%E5%B7%A5%E5%85%B7%E4%BF%AE%E5%A4%8D%E6%8D%9F%E5%9D%8F%E7%9A%84MBR/"/>
    <id>https://qiu-ye.github.io/2018/03/08/使用GRUB工具修复损坏的MBR/</id>
    <published>2018-03-08T02:49:00.000Z</published>
    <updated>2018-09-15T04:15:09.801Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><blockquote><p>Family always bless you without any conditions!<br>                               —— 《COCO》 from Pixar</p></blockquote><hr><p>对于操作系统来说，<br>系统安装盘就是它永远的家。<br>系统动不起来，<br>找妈妈（系统盘）就对了。</p><a id="more"></a><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>使用GRUB工具修复损坏的MBR</p><h3 id="操作平台"><a href="#操作平台" class="headerlink" title="操作平台"></a>操作平台</h3><ul><li>VMware Workstation 8.0</li><li>CentOS 6.6<ul><li>Kernel：2.6.32-504.el6.x86_64</li></ul></li></ul><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>备份系统盘的MBR<ul><li><code>dd if=/dev/sda of=/root/mbr.bak count=1 bs=512</code></li></ul></li><li>破坏MBR，注意不要破坏分区表<ul><li><code>dd if=/dev/zero of=/dev/sda count=1 bs=200</code>：bs值一定不要大于446</li></ul></li><li><code>sync</code></li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><strong>手动修复（使用条件：MBR被破坏后仍在系统中）</strong><ul><li>方法一：<ul><li><code>grub-install --root-directory=/ /dev/sda</code>：安装gurb，恢复MBR</li><li><code>sync</code></li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180308102240847.png" alt=""></li></ul></li><li>方法二：<ul><li><code>grub</code></li><li>grub&gt; <code>root (hd0,0)</code>：指定MBR所在的磁盘分区</li><li>grub&gt; <code>setup （hd0）</code>：安装GRUB</li><li><code>sync</code></li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180308102507264.png" alt=""></li></ul></li></ul></li><li><strong>救援模式修复（使用条件：MBR被破坏后无法进入系统）</strong><ul><li>载入安装光盘</li><li>启动系统进入系统安装界面<ul><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180308102636475.png" alt=""></li></ul></li><li>进入救援模式<ul><li>选择<code>Rescue installed system</code>选项</li><li>或在命令行模式下（esc键），键入<code>linux rescue</code></li><li>ψ(._. )&gt; <img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180308102726405.png" alt=""></li></ul></li><li>前面的设置略过不表<ul><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180308102858401.png" alt=""></li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180308102933281.png" alt=""></li></ul></li><li>Start shell<ul><li><code>chroot /mnt/sysimage</code>：原来系统根目录被挂载至救援模式下的/mnt/sysimage，做根切换</li><li><code>grub-install --root-directory=/ /dev/sda</code>：安装gurb，恢复MBR</li><li><code>exit</code>：退回到原来的根目录</li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180308103139195.png" alt="e"></li><li><code>reboot</code>：重启时记得把安装光盘卸载</li></ul></li></ul></li><li><strong>此时系统即可正常启动！完结撒花~撒花~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</strong><ul><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180308103441244.png" alt=""></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Family always bless you without any conditions!&lt;br&gt;                               —— 《COCO》 from Pixar&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;对于操作系统来说，&lt;br&gt;系统安装盘就是它永远的家。&lt;br&gt;系统动不起来，&lt;br&gt;找妈妈（系统盘）就对了。&lt;/p&gt;
    
    </summary>
    
      <category term="系统运维" scheme="https://qiu-ye.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://qiu-ye.github.io/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://qiu-ye.github.io/tags/CentOS/"/>
    
      <category term="Grub" scheme="https://qiu-ye.github.io/tags/Grub/"/>
    
  </entry>
  
  <entry>
    <title>对空白磁盘进行内核引导</title>
    <link href="https://qiu-ye.github.io/2018/03/08/%E5%AF%B9%E7%A9%BA%E7%99%BD%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E5%86%85%E6%A0%B8%E5%BC%95%E5%AF%BC/"/>
    <id>https://qiu-ye.github.io/2018/03/08/对空白磁盘进行内核引导/</id>
    <published>2018-03-08T01:01:00.000Z</published>
    <updated>2018-09-15T04:15:23.059Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>God said,”Let there be light,”and there was light.</p><hr><p>内核躺在磁盘中呼呼大睡<br>管理员叫过来GRUB说<br>“去，把世界唤醒”<br>内核伸了个懒腰<br>招呼它的小兄弟忙碌起来<br>于是<br>整个二进制世界五彩斑斓</p><a id="more"></a><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>为一块空白磁盘制作单独运行bash的Linux系统</p><h3 id="操作平台"><a href="#操作平台" class="headerlink" title="操作平台"></a>操作平台</h3><ul><li>VMware Workstation 8.0</li><li>CentOS 6.6<ul><li>Kernel：2.6.32-504.el6.x86_64</li></ul></li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p><strong>为虚拟机中的CentOS 6.6系统添加一块3G大小的空白磁盘</strong></p><ul><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180307214133104.png" alt="1"></li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-2018030721423181.png" alt="2"></li></ul></li><li><p><strong>启动CentOS 6.6系统，为空白磁盘分区。</strong></p><ul><li>查看新添加的磁盘标识符：<ul><li><code>fdisk -l</code>：列出所有磁盘状况</li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180307215155333.png" alt="3"></li></ul></li><li>将/dev/sdb磁盘分成三个区：<ul><li><code>fdisk /dev/sdb</code>：磁盘分区操作<ul><li>/dev/sdb1：计划作为<code>/boot</code>分区，分配空间100M</li><li>/dev/sdb2：计划作为<code>swap</code>分区，分配空间900M（注：由于添加的磁盘总容量较小，没有按照常规标准分配swap空间）</li><li>/dev/sdb3：计划作为<code>/</code>分区,分配1G空间</li></ul></li><li><code>partx -a /dev/sdb</code>：通知内核重新读取硬盘分区表</li><li><code>cat /proc/partitions</code>：查看内核是否已经识别新的分区</li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180307220455909.png" alt="4"></li></ul></li><li>向/dev/sdb磁盘中的分区写入文件系统：<ul><li><code>mke2fs -t ext4 /dev/sdb1</code>：/boot，文件系统 ext4</li><li><code>mkswap /dev/sdb2</code>：swap</li><li><code>mke2fs -t ext4 /dev/sdb1</code>：/，文件类型 ext4</li><li><code>fdisk -l /dev/sdb</code></li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180307222217886.png" alt="5"></li></ul></li></ul></li><li><strong>为新磁盘安装grub</strong><ul><li><code>mkdir /mnt/boot</code>：创建挂载点</li><li><code>mount /dev/sdb1 /mnt/boot</code>：将/dev/sdb1挂载至挂载点</li><li><code>grub-install --root-directory=/mnt /dev/sdb</code>：安装grub，指定grub的根目录为/mnt，grub-install会自动寻找boot/目录</li><li><code>ll /mnt/boot/grub</code>：grub安装命令在boot/下生成grub目录</li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180307223648432.png" alt="6"></li><li><code>cp /boot/vmlinuz-2.6.32-504.el6.x86_64 /mnt/boot/vmlinuz</code>：复制系统内核文件至新磁盘boot/中</li><li><code>cp /boot/initramfs-2.6.32-504.el6.x86_64.img /mnt/boot/initramfs.img</code>：复制initramfs文件至新磁盘boot/中</li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180307224413424.png" alt="7"></li><li><code>vim /mnt/boot/grub/grub.conf</code>：编写grub配置文件</li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180307233448449.png" alt=""></li></ul></li><li><strong>为新磁盘创建bash运行环境</strong><ul><li><code>mkdir /mnt/sysroot</code>：创建新磁盘的根分区挂载点</li><li><code>mount /dev/sdb3 /mnt/sysroot</code>：挂载新磁盘根分区</li><li><code>cd /mnt/sysroot</code>：</li><li><code>mkdir -pv bin dev etc home lib lib64 media mnt proc root sbin sys tmp usr var</code>：在新磁盘根下创建根目录（其实没必要创建那么多啦b(￣▽￣)d）</li><li><code>ll /mnt/sysroot</code>：（因为多创建点可以以假乱真呀！(✿◡‿◡)）</li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180307230223320.png" alt="9"></li><li><code>cp /bin/bash /mnt/sysroot/bin</code>：复制/bin/bash到新磁盘根目录下的/bin</li><li><code>ldd /bin/bash</code>：不要忘了/bin/bash运行所依赖的库文件</li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180307231123243.png" alt="10"></li><li><code>cp /lib64/libtinfo.so.5 /mnt/sysroot/lib64</code>：将库文件复制到新磁盘根目录下<strong>与之对应的</strong>目录中</li><li><code>cp /lib64/libdl.so.2 /mnt/sysroot/lib64</code></li><li><code>cp /lib64/libc.so.6 /mnt/sysroot/lib64</code></li><li><code>cp /lib64/ld-linux-x86-64.so.2 /mnt/sysroot/lib64</code></li><li><code>sync</code>：同步保存文件</li></ul></li><li><strong>接下来就是检验成果的时刻了</strong><ul><li>新建一个Linux虚拟机。<ul><li>注意：选择磁盘的时候，使用已存在的虚拟磁盘，尤其注意磁盘名要选对。</li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180307232156708.png" alt="11"></li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180307232449947.png" alt="12"></li></ul></li><li>启动在空白磁盘中新建的虚拟机<ul><li>进入grub引导界面</li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180307232814696.png" alt="13"></li><li>点击e键进入编辑模式</li><li>ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180307233617184.png" alt="14"></li><li>点击b键启动系统</li><li>bash启动成功 ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180307233709367.png" alt="15"></li><li>可正常执行bash自带命令 ψ(._. )&gt;</li><li><img src="http://p4uvkkxs2.bkt.clouddn.com/markdown-img-paste-20180307234033999.png" alt="16"></li></ul></li></ul></li><li><strong>大功告成！完结撒花~撒花~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</strong></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h3&gt;&lt;p&gt;God said,”Let there be light,”and there was light.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;内核躺在磁盘中呼呼大睡&lt;br&gt;管理员叫过来GRUB说&lt;br&gt;“去，把世界唤醒”&lt;br&gt;内核伸了个懒腰&lt;br&gt;招呼它的小兄弟忙碌起来&lt;br&gt;于是&lt;br&gt;整个二进制世界五彩斑斓&lt;/p&gt;
    
    </summary>
    
      <category term="系统运维" scheme="https://qiu-ye.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://qiu-ye.github.io/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://qiu-ye.github.io/tags/CentOS/"/>
    
      <category term="Grub" scheme="https://qiu-ye.github.io/tags/Grub/"/>
    
  </entry>
  
  <entry>
    <title>Linux进程及作业管理</title>
    <link href="https://qiu-ye.github.io/2018/03/06/Linux%E8%BF%9B%E7%A8%8B%E5%8F%8A%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86/"/>
    <id>https://qiu-ye.github.io/2018/03/06/Linux进程及作业管理/</id>
    <published>2018-03-06T00:45:37.000Z</published>
    <updated>2018-03-06T00:59:07.168Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进程相关概念"><a href="#进程相关概念" class="headerlink" title="进程相关概念"></a>进程相关概念</h3><ul><li><strong>进程：</strong><ul><li>处于运行状态的程序副本</li><li>正在执行的程序代码的实时结果</li><li>处于执行期的程序以及相关资源的总称</li></ul></li><li><p><strong>线程：</strong></p><ul><li>在进程中活动的对象</li><li>每个线程都拥有一个独立的程序计数器、进程栈和一组进程寄存器</li><li>是内核调度的对象</li></ul></li><li><p>同一个进程中的线程之间可以共享虚拟内存，但每个线程都拥有各自的虚拟处理器。</p></li><li>Windows和Solaris系统都在内核中提供了专门支持线程的机制，这些系统常常把线程称作轻量级进程，相较于重量级的进程，线程被抽象成一种耗费较少资源，运行迅速的执行单元。而对于Linux来说，它只是一种进程间共享资源的手段。</li></ul><a id="more"></a><ul><li>task struct：Linux内核存储进程信息的固定格式</li><li>task list：多个任务的task struct组成的链表</li><li>进程创建<ul><li>init</li><li>进程都由其父进程创建<ul><li>fork()</li><li>clone()</li></ul></li></ul></li><li>进程的调度<ul><li>进程优先级<ul><li>0-139：<ul><li>1-99：实时优先级</li><li>100-139：静态优先级<ul><li>数字越小，优先级越高</li></ul></li></ul></li><li>Nice值：<ul><li>-20，19</li></ul></li></ul></li><li>进程内存<ul><li>Page Frame：页框，用于存储页面数据</li><li>虚拟内存实现机制<ul><li>线性地址空间：每个进程都认为自己有3G内存可用</li><li>物理地址空间：处于内存不同位置的空闲的页，由内核映射为线性地址空间</li></ul></li><li>MMU：Memory Management Unit</li><li>缺页异常：进程访问的数据不存在，向内核申请从磁盘载入</li><li>常驻内存集</li><li>虚拟内存集：可被交换出去的内存集</li></ul></li><li>进程间通信：IPC-Inter Process Communication<ul><li>同一主机：<ul><li>signal</li><li>shm：shared memory</li><li>semerphor</li></ul></li><li>不同主机：<ul><li>rpc：remote procecure call</li><li>socket</li></ul></li></ul></li><li>进程类型<ul><li>守护进程：daemon，在系统引导过程中启动的进程，跟终端无关的进程</li><li>前台进程：和终端相关，通过终端启动的进程</li><li>注意：也可以把前台启动的进程送往后台，以守护模式运行</li></ul></li><li>进程状态<ul><li>运行态：running</li><li>就绪态：ready</li><li>睡眠态<ul><li>可中断：interruptable</li><li>不可中断：uninterruptable</li></ul></li><li>停止态：stopped，暂停于内存中，但不会被调度，除非被手动启动</li><li>僵死态：zombie</li></ul></li><li>进程的分类：<ul><li>CPU-Bound：一般属于非交互式进程</li><li>IO-Bound：一般属于交互式进程</li></ul></li><li>推荐两本Linux内核的书：《Linux内核设计与实现》《深入理解Linux内核》</li><li>Linux内核：抢占式多任务</li><li>IO过程<ol><li>从磁盘中把数据加载至内核内存</li><li>把数据从内核内存复制到进程内存中去</li></ol></li></ul></li></ul><h3 id="进程及作业管理"><a href="#进程及作业管理" class="headerlink" title="进程及作业管理"></a>进程及作业管理</h3><h4 id="进程管理命令"><a href="#进程管理命令" class="headerlink" title="进程管理命令"></a>进程管理命令</h4><ul><li><strong>pstree</strong></li><li><strong>ps：</strong> process state<ul><li>Linux系统各进程的相关信息均保存在/proc/PID目录下的个文件中，进程状态查看工具即通过读取此类文件显示进程相关状态。</li><li>常用组合<ul><li>aux：<ul><li>u：以用户为中心组织进程状态信息显示</li><li>a：与终端相关的进程</li><li>x：与终端无关的进程</li><li>字段含义：<ul><li>VSZ：Virtual memory Size，虚拟内存集</li><li>RSS：ReSident Size，常驻内存集</li><li>STAT：进程状态<ul><li>R：running</li><li>S：interruptable sleeping</li><li>D：uninterruptable sleeping</li><li>T：stopped</li><li>Z：zombie<br>-</li><li>+：前台进程</li><li>I：多线程进程</li><li>N：低优先级进程</li><li>&lt;：高优先级进程</li><li>s：session leader</li></ul></li></ul></li></ul></li><li>-ejf<ul><li>-e：显示所有进程</li><li>-f：显示完整格式的进程信息</li></ul></li><li>-eFH：<ul><li>-F：显示完整格式的进程信息</li><li>-H：以进程层级格式显示进程相关信息</li></ul></li></ul></li></ul></li><li><strong>pgrep，pkill</strong><ul><li>-u uid：effective user，指明用户的所有进程</li><li>-U uid：real user</li><li>-t terminal：与指定终端相关的进程</li><li>-l：显示进程名</li><li>-a：显示完整格式的进程名</li><li>-P pid：显示其父进程为此处指定进程的进程列表</li></ul></li><li><strong>pidof：</strong> 根据进程名获取其PID号</li><li><strong>top</strong><ul><li>内置命令<ul><li>排序：<ul><li>P：以占据的CPU百分比排序</li><li>M：以占据内存百分比排序</li><li>T：以积累占据CPU时长排序</li></ul></li><li>首部信息显示<ul><li>iptime信息：l命令</li><li>tasks及cpu信息：t命令</li><li>多颗cpu分别显示：1（数字）</li><li>内存信息：m命令</li></ul></li><li>修改刷新时间间隔：s命令</li><li>终止指定进程：k命令</li><li>-d：直接指明刷新时间间隔</li><li>-b：以批次方式显示（旧命令）</li></ul></li></ul></li><li><strong>htop</strong><ul><li>s：跟踪选定进程的系统调用</li><li>l：显示选定进程打开的文件列表</li><li>a：将选定的进程绑定至某指定CPU核心</li><li>t：显示进程树</li></ul></li><li><strong>vmstat：</strong>查看虚拟内存的命令（旧命令）<ul><li>字段含义：<ul><li>procs：<ul><li>r：等待运行的进程的个数</li><li>b：处于不可中断睡眠态的进程的个数（被阻塞的队列的长度）</li></ul></li><li>memory：<ul><li>swpd：交换内存的使用总量</li><li>free：空闲物理内存总量</li><li>buffer：用于buffer的内存总量</li><li>cache：用于cache的内存总量</li></ul></li><li>swap：<ul><li>si：数据进入swap中的数据速率（kb/s）</li><li>so：数据离开swap中的数据速率（kb/s）</li></ul></li><li>io：<ul><li>bi：从块设备读入数据到系统的速率（kb/s）</li><li>bo：保存数据到块设备的速率（kb/s）</li></ul></li><li>system：<ul><li>in：interrupts，中断速率</li><li>cs：context switch，进程切换速率</li></ul></li><li>cpu：<ul><li>us：用户空间占据cpu的比例</li><li>sy：内核空间占据cpu的比例</li><li>id：空闲比例</li><li>wa：等待IO完成所消耗的时间比例</li><li>st：被虚拟化技术偷走的时间比例</li></ul></li></ul></li><li>-s显示内存的统计数据</li></ul></li><li><strong>pmap：</strong>报告进程的内存映射表<ul><li>pmap [option] pid […]</li><li>-x：显示详细的</li></ul></li><li><strong>glance</strong><ul><li>使用pip安装</li><li>-b：以Byte为单位显示网卡数据速率</li><li>-d：关闭磁盘I/O模块</li><li>-f：/path/to/simefile：设定输入文件位置</li><li>-o {HTML|CSV}：输出格式</li><li>-m：禁用mount模块</li><li>-n：禁用网络模块</li><li>-t #：延时时间间隔</li><li>-1：每个CPU的相关数据单独显示</li><li>C/S模式下运行glances命令<ul><li>服务端模式：<ul><li>glances -s -B IPADDR<ul><li>IPADDR：指明监听于本机的哪个地址</li></ul></li></ul></li><li>客户端模式：<ul><li>glances -c IPADDR<ul><li>IPADDR：要连入的服务器端地址</li></ul></li></ul></li></ul></li></ul></li><li><strong>dstat</strong><ul><li>-c：显示CPU的状态信息</li><li>-C #,#,…total</li><li>-d：显示磁盘的读写速率</li><li>-D：total,sda,sdb,…</li><li>-g：显示page相关统计数据</li><li>-i：显示中断的统计数据</li><li>-m：显示内存相关统计数据</li><li>-n：显示网络相关统计数据</li><li>-p：显示进程相关统计数据</li><li>-r：显示io相关统计数据</li><li>-s：显示swapped相关的统计数据</li><li>–tcp</li><li>–udp</li><li>–unix</li><li>–raw</li><li>–socket</li><li>–ipc</li><li>–top-cpu：显示最占用CPU的进程</li><li>–top-io：显示最占用io的进程</li><li>–top-mem：显示最占用内存的进程</li><li>–top-lantency：显示延迟最大的进程</li></ul></li><li><strong>kill</strong><ul><li>-l：显示当前系统可用信号<ul><li>man 7 signal</li><li>常用信号<ul><li>1) SIGHUP：无须关闭进程而让其重读配置文件</li><li>2) SIGINT：中止正在运行的进程，相当于Ctrl+c</li><li>9) SIGKILL：杀死正在运行的进程</li><li>15) SIGTERM：终止正在运行的进程</li><li>18) SIGCONT：</li><li>19) SIGSTOP：</li></ul></li><li>指定信号的方法<ul><li>信号的数字标识：1</li><li>信号的完整名称：SIGHUP</li><li>信号的简写名称：HUP</li></ul></li></ul></li><li>killall：终止名称之下的所有进程</li></ul></li></ul><h4 id="作业控制命令"><a href="#作业控制命令" class="headerlink" title="作业控制命令"></a>作业控制命令</h4><ul><li>作业类型：<ul><li>前台作业：通过终端启动，且启动后一直占据终端</li><li>后台作业：可与通过终端启动，但启动后即转入后台运行（释放终端）</li></ul></li><li>让作业运行于后台<ul><li>运行中的作业：<code>Ctrl+z</code></li><li>尚未启动的作业：<code>COMMAND &amp;</code><ul><li>注意：此类作业虽然被送往后台运行，但其依然与终端相关；如果希望送往后台后，剥离与终端的关系，使用<code>nohub COMMAND &amp;</code></li></ul></li></ul></li><li>查看所有作业<ul><li>jobs</li></ul></li><li>作业控制<ul><li>fg [[%]JOB_NUM]：把指定的后台作业调回前台</li><li>bg [[%]JOB_NUM]：让送往后台的作业在后台继续运行</li><li>kill [%JOB_NUM]：终止指定的作业</li></ul></li><li>进程优先级调整<ul><li>进程默认启动时的nice值为0，优先级为120</li><li>nice -n priority pid</li><li>renice -n priority pid</li><li>查看进程nice值<ul><li>ps axo pid,comm,ni</li></ul></li></ul></li><li>其他常用命令：sar、tsar、iostat、iftop</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;进程相关概念&quot;&gt;&lt;a href=&quot;#进程相关概念&quot; class=&quot;headerlink&quot; title=&quot;进程相关概念&quot;&gt;&lt;/a&gt;进程相关概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;进程：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;处于运行状态的程序副本&lt;/li&gt;
&lt;li&gt;正在执行的程序代码的实时结果&lt;/li&gt;
&lt;li&gt;处于执行期的程序以及相关资源的总称&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;线程：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在进程中活动的对象&lt;/li&gt;
&lt;li&gt;每个线程都拥有一个独立的程序计数器、进程栈和一组进程寄存器&lt;/li&gt;
&lt;li&gt;是内核调度的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同一个进程中的线程之间可以共享虚拟内存，但每个线程都拥有各自的虚拟处理器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Windows和Solaris系统都在内核中提供了专门支持线程的机制，这些系统常常把线程称作轻量级进程，相较于重量级的进程，线程被抽象成一种耗费较少资源，运行迅速的执行单元。而对于Linux来说，它只是一种进程间共享资源的手段。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="系统运维" scheme="https://qiu-ye.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://qiu-ye.github.io/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://qiu-ye.github.io/tags/CentOS/"/>
    
      <category term="OS" scheme="https://qiu-ye.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Linux网络属性配置</title>
    <link href="https://qiu-ye.github.io/2018/03/05/Linux%E7%BD%91%E7%BB%9C%E5%B1%9E%E6%80%A7%E9%85%8D%E7%BD%AE/"/>
    <id>https://qiu-ye.github.io/2018/03/05/Linux网络属性配置/</id>
    <published>2018-03-05T14:53:59.000Z</published>
    <updated>2018-03-05T15:35:00.066Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网络基础知识回顾"><a href="#网络基础知识回顾" class="headerlink" title="网络基础知识回顾"></a>网络基础知识回顾</h3><h4 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h4><ul><li>A类：<ul><li>0 000 0000 - 0 111 1111：1-127</li><li>网络数：127</li><li>每个网络中的主机数：2^24-2</li><li>默认子网掩码：255.0.0.0</li><li>私网地址：10.0.0.0/8</li></ul></li><li>B类：<ul><li>10 00 0000 - 10 11 1111：128-191</li><li>网络数：2^14</li><li>每个网络中的主机数：2^16-2</li><li>默认子网掩码：255.255.0.0</li><li>私网地址：172.16.0.0/16-172.31.0.0/16</li></ul></li><li>C类：<ul><li>110 0 0000 - 110 1 1111：192-223</li><li>网络数：2^21</li><li>每个网络中的主机数：2^8-2</li><li>默认子网掩码：255.255.255.0</li><li>私网地址：192.168.0.0/24-192.168.255.0/24</li></ul></li><li>D类：组播<ul><li>1110 0000 - 1110 1111：224-239</li></ul></li><li>E类：<ul><li>1111 0000 - 1111 1111：240-255</li></ul></li></ul><a id="more"></a><h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h4><ul><li>172.16.100.100/255.255.0.0，172.17.1.1</li><li>跨路由通信需要配置路由<ul><li>主机路由</li><li>网络路由</li><li>默认路由</li></ul></li></ul><h3 id="Linux网络属性配置"><a href="#Linux网络属性配置" class="headerlink" title="Linux网络属性配置"></a>Linux网络属性配置</h3><ul><li>Linux接入网络必须要素<ul><li>IP/mask</li><li>路由：默认网关</li><li>DNS服务器<ul><li>主DNS服务器</li><li>次DNS服务器</li><li>第三DNS服务器</li></ul></li></ul></li></ul><h4 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h4><ul><li>静态指定：</li><li>动态分配：<ul><li>DHCP：Dynamic Host Configuration Protocol</li></ul></li></ul><h5 id="ifcfg家族命令：ifconfig，route，netstat"><a href="#ifcfg家族命令：ifconfig，route，netstat" class="headerlink" title="ifcfg家族命令：ifconfig，route，netstat"></a>ifcfg家族命令：ifconfig，route，netstat</h5><ul><li><strong>ifconfig：</strong><ul><li>ifconfig [Interface]<ul><li>ifconfig -a</li><li>ifconfig IFACE [up/down]</li></ul></li><li>ifconfig Interface [aftype] option | address …<ul><li>ifconfig IFACE IP/mask [up]</li><li>ifconfig IFACE IP netmask MASK</li><li>启用混杂模式：[-]promisc</li></ul></li><li>注意：立即生效，但不一定永久生效</li></ul></li><li><strong>route：</strong> 路由管理<ul><li>route -n：查看</li><li>route add [-net|host] target [netmast Nm] [gw Gw] [[dev] If]<ul><li>目标：192.168.1.3  网关：172.16.0.1</li><li>route add -host 192.168.1.3 gw 172.16.0.1 dev eth0</li><li>目标：192.168.0.0  网关：172.16.0.1</li><li>route add -net 192.168.0.0/24 gw 172.16.0.1 dev eth0</li><li>route add -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1 dev eth0</li><li>默认路由，网关：127.16.0.1</li><li>route add -net 0.0.0.0 netmask 0.0.0.0 gw 172.16.0.1</li><li>route add default gw 172.16.0.1</li></ul></li><li>route del -host target<ul><li>目标：192.168.1.3  网关：172.16.0.1</li><li>route del -host 192.168.1.3</li><li>目标：192.168.0.0  网关：172.16.0.1</li><li>route del -net 192.168.0.0 netmask 255.255.255.0</li></ul></li></ul></li><li><strong>netstat：</strong> Print network connections, routing tables, interface statistics, masquerade connections, and mul‐ticast memberships<ul><li>显示网络连接：<ul><li>-t：TCP协议相关</li><li>-u：UDP协议相关</li><li>-r：raw socket相关</li><li>-l：处于监听状态</li><li>-a：所有状态</li><li>-n：以数字格式显示IP和窗口</li><li>-e：扩展格式</li><li>-p：显示相关进程及PID</li><li>常用组合：-tan，-uan，-tnl，-unl</li></ul></li><li>显示路由表<ul><li>-r：显示内核路由表</li><li>-n：数字格式</li></ul></li><li>显示接口统计信息<ul><li>-i：所有接口</li><li>-I IFACE：制定接口</li></ul></li></ul></li></ul><h5 id="ip家族命令：ip-link，addr，route-，ss，tc"><a href="#ip家族命令：ip-link，addr，route-，ss，tc" class="headerlink" title="ip家族命令：ip {link，addr，route}，ss，tc"></a>ip家族命令：ip {link，addr，route}，ss，tc</h5><ul><li><strong>ip link：</strong> 网络设备配置<ul><li>set<ul><li>[dev IFACE up|down]：启用或禁用接口</li></ul></li><li>show<ul><li>[dev IFACE]：制定接口</li><li>[up]：仅显示处于激活状态的接口</li></ul></li></ul></li><li><strong>ip addr</strong><ul><li>{add | del} IFADDR dev STRING<ul><li>[label LABEL]：添加地址时指明网卡别名</li><li>[scope {global|link|host}]：指明作用域<ul><li>global：全局可用</li><li>link：仅链接可用</li><li>host：本即可用</li></ul></li><li>[breadcast ADDRESS]：指明广播地址</li></ul></li><li>show<ul><li>[dev DEVICE]：制定接口</li><li>[label PATTERN]:</li><li>[primary and secondary]</li></ul></li><li>flush<ul><li>使用格式同show</li></ul></li></ul></li><li><strong>ip route</strong><ul><li>add：ip route add TARGET via GW dev IFACE src SOURCE_IP<ul><li>TARGET<ul><li>主机路由：IP</li><li>网络路由：NETWORK/MASK</li><li>添加网关：ip route add defalt via GW dev IFACE</li></ul></li></ul></li><li>del：ip route del TARGET</li><li>flush：ip route flush [dev iFACE] [via PREFIX]</li><li>show：ip route show [dev iFACE] [via PREFIX]</li></ul></li><li><strong>ss [OPTION]… [FILTER]</strong><ul><li>OPTION<ul><li>-t：tcp协议相关</li><li>-u：udp协议相关</li><li>-w：裸套接字相关</li><li>-x：unix sock相关</li><li>-l：listen状态的连接</li><li>-a：所有</li><li>-n：数字格式</li><li>-p：相关程序及PID</li><li>-e：扩展的信息</li><li>-m：内存用量</li><li>-o：计时器信息</li></ul></li><li>FILTER：[state TCP-STATE] [EXPRESSION]<ul><li>TCP-STATE：TCP的常见状态，TCP finite state machine<ul><li>LISTEN：监听</li><li>ESTABLISTEN：已建立的连接</li><li>FIN_WAIT_1</li><li>FIN_WAIT_2</li><li>SYN_SENT</li><li>SYN_RECV</li><li>CLOSED</li></ul></li><li>EXPRESSION<ul><li>dport</li><li>sport</li><li>示例：’(dport = :ssh or sport = :ssh)’</li></ul></li></ul></li><li>常用组合：-tan，-tanl，-tanlp，-uan</li></ul></li></ul><h5 id="更改配置文件："><a href="#更改配置文件：" class="headerlink" title="更改配置文件："></a>更改配置文件：</h5><ul><li><strong>IP、MASK、GW、NDS相关配置文件：</strong>/etc/sysconfig/network-scripts/ifcfg-IFACE<ul><li>DEVICE：此配置文件应用到的设备</li><li>HWADDR：对应的设备的MAC地址</li><li>BOOTPROTO：激活此设备时使用的地址配协议，常用的有dhcp，static，none，bootp</li><li>NM_CONTROLLED：NM是NetworkManager的简写，此网卡是否接受NM控制：CentOS6及建议为“no”</li><li>ON_BOOT：在系统引导时是否激活此设备</li><li>TYPE：接口类型，常见的有Ethernet，Bridge</li><li>UUID：设备的唯一标识</li><li>IPADDR：指明IP地址</li><li>NETMASK：子网掩码</li><li>GATEWAY：默认网关</li><li>DNS1：第一个DNS服务器指向</li><li>DNS2：第二个DNS服务器指向</li><li>USERCTL：普通用户是否可控制此设备</li><li>PEERDNS：如果BOOTPROTO的值为”dhcp”，是否允许dhcp server分配的dns服务器指向信息直接覆盖至/etc/resolv</li></ul></li><li><strong>路由相关的配置文件：</strong>/etc/sysconfig/network-scripts/route-IFACE<ul><li>两种风格的路由添加方式<ul><li>TARGET via GW</li><li>每三行定义一条路由<ul><li>ADDRESS#=TARGET</li><li>NETMASK#=mask</li><li>GATEWAY#=GW</li></ul></li></ul></li></ul></li><li><strong>system-config-network-tui（setup）</strong></li></ul><h5 id="CentOS-7网络属性配置："><a href="#CentOS-7网络属性配置：" class="headerlink" title="CentOS 7网络属性配置："></a>CentOS 7网络属性配置：</h5><ul><li>nmtui</li><li><p>nmcli [OPTIONS] OBJECT {COMMAND | help}</p><ul><li>device：网络接口显示和管理</li><li>connection：网络连接的启动禁用和管理<ul><li>修改IP地址等属性<ul><li>nmcli connection modify IFACE [+|-]setting.property value<ul><li>setting.property:<ul><li>ipv4.addresses</li><li>ipv4.gateway</li><li>ipv4.dns1</li><li>ipv4.method</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>配置网络接口</p><ul><li>接口命名方式：<ul><li>CentOS：<ul><li>以太网：eth[0,1,3,…]</li></ul></li><li>systemd对网络设备的命名方式：<ul><li>如果Firmware或BIOS为主板上集成的设备提供的索引信息可用，且可预测根据此索引进行命名，例如eno1；</li><li>如果Firmware或BIOS为PCI-E扩展槽所提供的索引信息可用，且可预测，则根据此索引进行命名，例如ens1；</li><li>如果硬件接口的物理位置信息可用，则根据此信息进行命名，例如enp2s0；</li><li>如果用户显式启动，也可根据MAC地址命名，enx3287a1dc56；</li><li>上述均不可用时，则使用传统命名机制；</li><li>上述命名机制中，有的需要biosdevname程序的参与</li></ul></li><li>名称组成格式<ul><li>en：ethernet</li><li>wl：wlan</li><li>ww：wwan</li><li>名称类型<ul><li>o<index>：继承设备的设备索引号</index></li><li>s<slot>：扩展槽的索引号</slot></li><li>x<mac>：基于MAC地址的命名</mac></li><li>p<bus>s<slot>：enp2s1</slot></bus></li></ul></li></ul></li></ul></li><li>网卡设备的命名过程<ol><li>udev，辅助工具程序/lib/udev/rename_device查询文件/usr/lib/udev/rules.d/60-net.rules</li><li>biosdevname=1 会根据/usr/lib/udev/rules.d/71-biosdevname.rules文件命名</li><li>通过检测网络接口设备，根据/usr/lib/udev/rules.d/75-net-description<ul><li>ID_NET_NAME_ONBOARD,ID_NET_NAME_SLOT,ID_NET_NAME_PATH</li></ul></li></ol></li><li>网络接口识别并命名相关的udev配置文件<ul><li>/etc/udev/rules.d/70-persistent-net.rules</li><li>卸载网卡驱动：modprobe -r e1000</li><li>装载网卡驱动：modprobe e1000</li></ul></li><li>禁止修改网络接口名称<ul><li>修改/etc/default/grub<ul><li>将GRUB_CMDLINE_LINUX行改为”GRUB_CMDLINE_LINUX=”net.ifnames=0 rhgb quiet””</li><li>重新生成grub配置文件<ul><li>grub2-mkconfig -o /boot/grub/grub2.cfg</li></ul></li><li>重启系统</li></ul></li></ul></li></ul></li></ul><h5 id="其他网络相关常用命令"><a href="#其他网络相关常用命令" class="headerlink" title="其他网络相关常用命令"></a>其他网络相关常用命令</h5><ul><li>DNS服务器指定<ul><li>编辑文件：/etc/resolv.conf<ul><li>nameserver DNS_SERVER_IP1</li><li>nameserver DNS_SERVER_IP2</li><li>nameserver DNS_SERVER_IP3</li></ul></li><li>正解：FQDN –&gt; IP<ul><li>dig -t A FQDN</li><li>host -t A FQDN</li></ul></li><li>反解：IP –&gt; FQDN<ul><li>dig -x IP</li><li>host -t PTR IP</li></ul></li></ul></li><li>给网卡配置多地址<ul><li>ifconfig IFACE_ALITS</li><li>ip addr add</li><li>配置文件：<ul><li>ifcfg-IFACE_ALITS<ul><li>DEVICE-IFACE_ALIAS</li></ul></li></ul></li><li>注意：网关别名不能使用dhcp协议引导</li></ul></li><li>配置当前主机的主机名<ul><li>hostname [HOSTNAME]</li><li>/etc/sysconfig/network<ul><li>HOSTNAME=</li></ul></li></ul></li><li>网络客户端lftp、wget<ul><li>lftp [-p port] [-u user[,password]] SERVER</li><li>子命令：<ul><li>get</li><li>mget</li><li>ls</li><li>help</li><li>lftpget URL</li></ul></li><li>wget [option]… [URL]…<ul><li>-q：静默模式</li><li>-c：断点续传</li><li>-o：保存位置</li><li>–limit-ratesz：指定传输速率</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;网络基础知识回顾&quot;&gt;&lt;a href=&quot;#网络基础知识回顾&quot; class=&quot;headerlink&quot; title=&quot;网络基础知识回顾&quot;&gt;&lt;/a&gt;网络基础知识回顾&lt;/h3&gt;&lt;h4 id=&quot;IP地址分类&quot;&gt;&lt;a href=&quot;#IP地址分类&quot; class=&quot;headerlink&quot; title=&quot;IP地址分类&quot;&gt;&lt;/a&gt;IP地址分类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;A类：&lt;ul&gt;
&lt;li&gt;0 000 0000 - 0 111 1111：1-127&lt;/li&gt;
&lt;li&gt;网络数：127&lt;/li&gt;
&lt;li&gt;每个网络中的主机数：2^24-2&lt;/li&gt;
&lt;li&gt;默认子网掩码：255.0.0.0&lt;/li&gt;
&lt;li&gt;私网地址：10.0.0.0/8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B类：&lt;ul&gt;
&lt;li&gt;10 00 0000 - 10 11 1111：128-191&lt;/li&gt;
&lt;li&gt;网络数：2^14&lt;/li&gt;
&lt;li&gt;每个网络中的主机数：2^16-2&lt;/li&gt;
&lt;li&gt;默认子网掩码：255.255.0.0&lt;/li&gt;
&lt;li&gt;私网地址：172.16.0.0/16-172.31.0.0/16&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C类：&lt;ul&gt;
&lt;li&gt;110 0 0000 - 110 1 1111：192-223&lt;/li&gt;
&lt;li&gt;网络数：2^21&lt;/li&gt;
&lt;li&gt;每个网络中的主机数：2^8-2&lt;/li&gt;
&lt;li&gt;默认子网掩码：255.255.255.0&lt;/li&gt;
&lt;li&gt;私网地址：192.168.0.0/24-192.168.255.0/24&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;D类：组播&lt;ul&gt;
&lt;li&gt;1110 0000 - 1110 1111：224-239&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;E类：&lt;ul&gt;
&lt;li&gt;1111 0000 - 1111 1111：240-255&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="系统运维" scheme="https://qiu-ye.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://qiu-ye.github.io/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://qiu-ye.github.io/tags/CentOS/"/>
    
      <category term="TCP/IP" scheme="https://qiu-ye.github.io/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>RAID基础原理</title>
    <link href="https://qiu-ye.github.io/2018/03/05/RAID%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <id>https://qiu-ye.github.io/2018/03/05/RAID基础原理/</id>
    <published>2018-03-05T14:17:39.000Z</published>
    <updated>2018-03-05T14:51:17.365Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RAID概念"><a href="#RAID概念" class="headerlink" title="RAID概念"></a>RAID概念</h3><ul><li>Redundant Arrays of Inexpensive/Independent Disks</li><li>廉价/独立冗余磁盘阵列</li></ul><a id="more"></a><h3 id="提高磁盘性能的方法"><a href="#提高磁盘性能的方法" class="headerlink" title="提高磁盘性能的方法"></a>提高磁盘性能的方法</h3><ul><li>提高IO能力<ul><li>磁盘并行读写、添加内存模块</li></ul></li><li>提高耐用性<ul><li>通过磁盘冗余实现</li></ul></li><li>实现方式<ul><li>外接式磁盘阵列：通过扩展卡提供适配能力</li><li>内接式RAID：主板集成RAID控制器</li><li>Software RAID：</li></ul></li></ul><h3 id="RAID级别："><a href="#RAID级别：" class="headerlink" title="RAID级别："></a>RAID级别：</h3><ul><li>REID-0：0，条带卷，strip<ul><li>读、写性能提升</li><li>可用空间：N*min(S1,S2…)</li><li>无容错能力</li><li>最少磁盘数2</li></ul></li><li>REID-1：1，镜像卷，mirror<ul><li>读性能提升、写性能略有下降</li><li>可用空间1*min(S1,S2…)</li><li>有冗余能力</li><li>最少磁盘数2</li></ul></li><li>REID-5：循环作为校验盘<ul><li>读写性能提升</li><li>可用空间(N-1)*min(S1,S2…)</li><li>有容错能力；1块磁盘</li><li>最少磁盘数3</li></ul></li><li>REID-6：循环作为校验盘，两块校验盘<ul><li>读写性能提升</li><li>可用空间(N-2)*min(S1,S2…)</li><li>有容错能力；2块磁盘</li><li>最少磁盘数4</li></ul></li><li>REID-10：先按照READ-1组织，再按照REID-0组织<ul><li>读写性能提升</li><li>可用空间N*min(S1,S2…)/2</li><li>有容错能力；每组镜像最多只能坏一块</li><li>最少磁盘数4</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RAID概念&quot;&gt;&lt;a href=&quot;#RAID概念&quot; class=&quot;headerlink&quot; title=&quot;RAID概念&quot;&gt;&lt;/a&gt;RAID概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Redundant Arrays of Inexpensive/Independent Disks&lt;/li&gt;
&lt;li&gt;廉价/独立冗余磁盘阵列&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="系统运维" scheme="https://qiu-ye.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://qiu-ye.github.io/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://qiu-ye.github.io/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>程序包管理</title>
    <link href="https://qiu-ye.github.io/2018/02/28/%E7%A8%8B%E5%BA%8F%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <id>https://qiu-ye.github.io/2018/02/28/程序包管理/</id>
    <published>2018-02-28T09:52:10.000Z</published>
    <updated>2018-02-28T11:01:02.237Z</updated>
    
    <content type="html"><![CDATA[<h3 id="程序包管理器"><a href="#程序包管理器" class="headerlink" title="程序包管理器"></a>程序包管理器</h3><ul><li>功能：将编译好的应用程序的各组成文件打包成一个或几个程序包文件，从而方便快捷地实现程序包地安装、卸载、查询、升级和校验等管理操作</li><li>组成部分<ul><li>程序的组成清单（每个包独有）<ul><li>文件清单</li><li>安装或卸载时运行的脚本</li></ul></li><li>数据库（公共）<ul><li>程序包名称及版本</li><li>依赖关系</li><li>功能说明</li><li>安装生成的各文件的文件路径及校验码信息</li></ul></li></ul></li><li>程序包获取途径<ul><li>系统发行版的光盘或官方服务器、镜像站点<ul><li><a href="http://mirrors.aliyun.com" target="_blank" rel="noopener">http://mirrors.aliyun.com</a></li><li><a href="http://mirrors.sohu.com" target="_blank" rel="noopener">http://mirrors.sohu.com</a></li><li><a href="http://mirrors.163.com" target="_blank" rel="noopener">http://mirrors.163.com</a></li></ul></li><li>项目官方站点</li><li>第三方组织<ul><li><a href="http://pkgs.org" target="_blank" rel="noopener">http://pkgs.org</a></li><li><a href="http://rpmfind.net" target="_blank" rel="noopener">http://rpmfind.net</a></li><li><a href="http://rpm.pbone.net" target="_blank" rel="noopener">http://rpm.pbone.net</a></li></ul></li></ul></li><li>ldd /PATH/TO/BINARY_FILE：查看二进制程序所依赖的库文件</li><li>ldconfig<ul><li>-p：显示本机已经缓存的所有可用的库文件名及文件路径映射关系</li><li>配置文件：/etc/ld.so.conf,/etc/ld.so.conf.d/*.conf</li><li>缓存文件：/etc/ld.so.cache</li></ul></li></ul><a id="more"></a><h3 id="CentOS系统上rpm命令管理程序"><a href="#CentOS系统上rpm命令管理程序" class="headerlink" title="CentOS系统上rpm命令管理程序"></a>CentOS系统上rpm命令管理程序</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li>rpm {-i|–install} [install-options] PACKAGE_FILE<ul><li>-v：verbose</li><li>-vv</li><li>-h：以#显示程序包管理执行进度</li><li>-ivh [install-options]<ul><li>–test：测试安装，但不真正执行安装过程，dry run模式</li><li>–nodeps：忽略依赖关系</li><li>–replacepkgs：重新安装</li><li>–nodigest：不检查包完整性</li><li>–noscipts：不执行程序包脚本片段<ul><li>–nopre：安装前脚本</li><li>–nopost：安装后脚本</li><li>–nopreun：卸载前脚本</li><li>–nopostun：卸载后脚本</li></ul></li></ul></li></ul></li></ul><h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><ul><li>rpm {-U|–upgrade} [install-options] PACKAGE_FILE<ul><li>-Uvh<ul><li>安装有旧版程序包，则“升级”；如果不存在旧版程序包，则“安装”</li></ul></li></ul></li><li>rpm {-F|–freshen} [install-options] PACKAGE_FILE<ul><li>-Fvh<ul><li>安装有旧版程序包，则“升级”；如果不存在旧版程序包，则不执行升级操作</li></ul></li><li>–oldpackage：降级</li><li>–force：强制升级</li></ul></li><li>不要对内核做升级操作；Linux支持多内核不版本并存，因此可直接安装新版本内核</li><li>如果原程序包的配置文件安装后被更改，升级时新版本提供的同一个配置文件不会直接覆盖老版本的配置文件，而把新版本的文件重命名（FILENAME.rpmnew）后保留</li></ul><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><ul><li>rpm {-q|–query} [select-options] [query-options] PACKAGE_FILE<ul><li>[select-options]<ul><li>-a：所有包</li><li>-f：查看制定的文件由哪个程序包安装生成</li><li>-p /PATH/TO/PACKAGE_FILE：针对尚未安装的程序包文件做查询操作</li><li>–whatprovides CAPABILITY：查询指定的CAPABILITY由哪个包所提供</li><li>–whatrequires CAPABILITY：查询指定的CAPABILITY被哪个包所依赖</li></ul></li><li>[query-options]<ul><li>–changelog：查询rpm包的changlog</li><li>-c：查询程序的配置文件</li><li>-d：查询程序的文档</li><li>-i：information</li><li>-l：查看指定的程序包安装后生成的所有文件</li><li>–scripts：程序包自带的脚本片段</li><li>-R：查询指定的程序包所依赖的CAPABILITY</li><li>–provides：列出指定程序包所提供的CAPABILITY</li></ul></li><li>-qi -qf -qc -ql -qd -qpi -qpl -qa</li></ul></li></ul><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><ul><li>rpm {-e|–erase} [–allmatches] [–nodeps] [–noscripts] [–notriggers] [–test] PACKAGE_FILE</li></ul><h4 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h4><ul><li>rpm {-V|–verify} [select-options] [verify-options]</li><li>包完整性验证：SHA256</li><li>来源合法性验证：RSA</li></ul><h4 id="数据库重建"><a href="#数据库重建" class="headerlink" title="数据库重建"></a>数据库重建</h4><ul><li>rpm {–initdb|–rebuilddb}<ul><li>initdb：初始化，如果事先不存在数据库，则新建；否则，不执行任何操作</li><li>rebuilddb：无论当前存在与否，直接重建数据库</li></ul></li></ul><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li>install/reinstall</li><li>update/downgrade</li><li>check-update</li><li>remove</li><li>info</li><li>provides</li><li>clean [packages | metadate | expire-cache | rpmdb | plugins | all]</li><li>makecache：构建缓存</li><li>search string1：以指定的关键字搜索程序包名及summary信息</li><li>deplist：查看指定包所依赖的capabilities</li><li>history [info | list | packages-info | summary | addon-info | redo | undo | rollback | new | sync | stats]</li></ul><h4 id="使用光盘当作本地yum仓库"><a href="#使用光盘当作本地yum仓库" class="headerlink" title="使用光盘当作本地yum仓库"></a>使用光盘当作本地yum仓库</h4><ul><li>挂载光盘至某目录 <code>mount -r -t iso9660 /dev/cdrom /media/cdrom</code></li><li>创建配置文件<ul><li>[CentOS7]</li><li>name=</li><li>baseuel=</li><li>gpgcheck=</li><li>enabled=</li></ul></li></ul><h4 id="yum的命令行选项"><a href="#yum的命令行选项" class="headerlink" title="yum的命令行选项"></a>yum的命令行选项</h4><ul><li>–nogpgcheck：禁止进行GPG检查</li><li>-y：自动回答为yes</li><li>-q：静默模式</li><li>–disablerepo=repoidglob：临时禁用此处指定的repo</li><li>–enablerepo=repoidglob：临时启用此处指定的repo</li></ul><h4 id="yum的repo配置文件中可用的变量"><a href="#yum的repo配置文件中可用的变量" class="headerlink" title="yum的repo配置文件中可用的变量"></a>yum的repo配置文件中可用的变量</h4><ul><li>$releasever:当前OS的发行版的主版本号</li><li>$arch：平台</li><li>$basearch：基础平台</li></ul><h4 id="创建yum仓库"><a href="#创建yum仓库" class="headerlink" title="创建yum仓库"></a>创建yum仓库</h4><ul><li>createrepo</li></ul><h3 id="程序包编译安装"><a href="#程序包编译安装" class="headerlink" title="程序包编译安装"></a>程序包编译安装</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>testapp-VERSION-release.src.rpm —&gt; 安装后使用rpmrebuild命令制作成二进制格式的rpm包，然后再安装</li><li>源代码组织格式<ul><li>多文件：文件中的代码之间，可能存在跨文件依赖关系</li><li>项目管理器<ul><li>c\C++：make （configure -&gt; Makefile.in -&gt; makefile）</li><li>java：maven</li></ul></li></ul></li><li>开发工具<ul><li>autoconf：生成configure脚本</li><li>automake：生成Makefile.in</li></ul></li><li>开源程序源代码获取<ul><li>官方自建站点<ul><li>apache.org(ASF)</li><li>mariadb.org</li></ul></li><li>代码托管<ul><li>SourceForge</li><li>github.com</li></ul></li></ul></li></ul><h4 id="编译C源码"><a href="#编译C源码" class="headerlink" title="编译C源码"></a>编译C源码</h4><ul><li>提供开发工具及开发环境<ul><li>开发工具：make，gcc等</li><li>开发环境：开发库（标准库 gilbc），头文件</li><li>编译安装三步骤</li><li>./configure:<ul><li>通过选项传递参数，指定启用特性、安装路径等，执行时会参考用户的指定以及Makefile.in文件生成makefile</li><li>检查依赖到的外部环境</li><li>选项<ul><li>安装路径设定：<ul><li>–prefix=/PATH/TO/SOMEWHERE：制定默认安装位置</li><li>–sysconfdir=/PATH/TO/SOMEWHERE：配置文件安装位置</li></ul></li><li>System types：交叉编译时使用，制定系统类型</li><li>Optional Features：可选特性<ul><li>–disable-FEATURE</li><li>–enable-FEATURE[=ARG]</li></ul></li><li>Optional Packages：依赖到的可选包<ul><li>–with-PACKAGE[=ARG]</li><li>–without-PACKAGE</li></ul></li></ul></li></ul></li><li>make：根据makefile文件构建应用程序</li><li>make install</li></ul></li><li>安装后的配置<ul><li>导出二进制程序目录至PATH环境变量中<ul><li>编辑文件/etc/profile.d/NAME.sh</li><li>export PATH=/PATH/TO/BIN:$PATH</li></ul></li><li>导出库文件路径<ul><li>编辑文件/etc/ld.so.conf.d/NAME.sh</li><li>添加新的库文件所在目录至此文件中</li><li>让系统重新生成缓存</li><li>ldconfig [v]</li></ul></li><li>导出头文件<ul><li>基于链接的方式实现ln -sv</li></ul></li><li>导出帮助手册<ul><li>编辑文件/etc/man.config</li><li>添加一个MANPATH</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;程序包管理器&quot;&gt;&lt;a href=&quot;#程序包管理器&quot; class=&quot;headerlink&quot; title=&quot;程序包管理器&quot;&gt;&lt;/a&gt;程序包管理器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;功能：将编译好的应用程序的各组成文件打包成一个或几个程序包文件，从而方便快捷地实现程序包地安装、卸载、查询、升级和校验等管理操作&lt;/li&gt;
&lt;li&gt;组成部分&lt;ul&gt;
&lt;li&gt;程序的组成清单（每个包独有）&lt;ul&gt;
&lt;li&gt;文件清单&lt;/li&gt;
&lt;li&gt;安装或卸载时运行的脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据库（公共）&lt;ul&gt;
&lt;li&gt;程序包名称及版本&lt;/li&gt;
&lt;li&gt;依赖关系&lt;/li&gt;
&lt;li&gt;功能说明&lt;/li&gt;
&lt;li&gt;安装生成的各文件的文件路径及校验码信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;程序包获取途径&lt;ul&gt;
&lt;li&gt;系统发行版的光盘或官方服务器、镜像站点&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mirrors.aliyun.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mirrors.aliyun.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mirrors.sohu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mirrors.sohu.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mirrors.163.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mirrors.163.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;项目官方站点&lt;/li&gt;
&lt;li&gt;第三方组织&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pkgs.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pkgs.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rpmfind.net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://rpmfind.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rpm.pbone.net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://rpm.pbone.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ldd /PATH/TO/BINARY_FILE：查看二进制程序所依赖的库文件&lt;/li&gt;
&lt;li&gt;ldconfig&lt;ul&gt;
&lt;li&gt;-p：显示本机已经缓存的所有可用的库文件名及文件路径映射关系&lt;/li&gt;
&lt;li&gt;配置文件：/etc/ld.so.conf,/etc/ld.so.conf.d/*.conf&lt;/li&gt;
&lt;li&gt;缓存文件：/etc/ld.so.cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="系统运维" scheme="https://qiu-ye.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://qiu-ye.github.io/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://qiu-ye.github.io/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>磁盘和文件系统管理</title>
    <link href="https://qiu-ye.github.io/2018/02/28/%E7%A3%81%E7%9B%98%E5%92%8C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    <id>https://qiu-ye.github.io/2018/02/28/磁盘和文件系统管理/</id>
    <published>2018-02-28T09:31:49.000Z</published>
    <updated>2018-02-28T11:14:07.278Z</updated>
    
    <content type="html"><![CDATA[<h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><ul><li>fdisk：一块硬盘最多管理15个分区<ul><li>fdisk -l Device</li><li>fdisk Device<ul><li>p：print，显示已有分区</li><li>n：new，创建</li><li>d：delete，删除</li><li>w：write，写入磁盘并退出</li><li>q：quit，放弃更改并退出</li><li>m：获取帮助</li><li>l：分区id列表</li><li>t：调整分区id</li></ul></li></ul></li><li>查看内核是否已经识别新的分区<ul><li>cat /proc/partations</li></ul></li><li>通知内核重新读取硬盘分区表<ul><li>partx -a /dev/device<ul><li>-n M:N</li></ul></li><li>kpartx -a /dev/device<ul><li>-f force</li><li>-a</li></ul></li></ul></li></ul><a id="more"></a><h3 id="文件系统管理"><a href="#文件系统管理" class="headerlink" title="文件系统管理"></a>文件系统管理</h3><h4 id="创建文件系统"><a href="#创建文件系统" class="headerlink" title="创建文件系统"></a>创建文件系统</h4><ul><li>相关工具<ul><li>mkfs.FS_TYPE /dev/device<ul><li>ext4</li><li>xfs</li><li>btrfs</li><li>vfat</li></ul></li><li>mkfs -t FS_TYPE /dev/device<ul><li>-L ‘LABEL’：设定卷标</li></ul></li><li>mke2fs：ext系列文件系统管理工具<ul><li>-t {ext2|ext3|ext4}</li><li>-b {1024|2048|4096}</li><li>-L ‘LABEL’</li><li>-j 相当于 -t ext3<ul><li>mkfs.ext3 = mkfs -t ext3 = mke2fs -j = mk2fs -t ext3</li></ul></li><li>-i #：为数据空间中每多少个字节创建一个inode，此大小不应该小于block的大小</li><li>-N #：为数据空间创建个多少个inode</li><li>-m #：为管理人员预留的空间占据的百分比</li><li>-O FEATURE[,…]<ul><li>-O ^FEATURE：关闭制定特性</li></ul></li></ul></li><li>mkswap：创建交换分区<ul><li>-L ‘LABEL’</li><li>前提：调整其分区的ID为82</li></ul></li></ul></li><li>其他常用工具<ul><li>blkid ：块设备属性信息查看<ul><li>-U UUID：根据指定的UUID来查找对应的设备</li><li>-L LABEL：根据指定的LABEL来查找对应的设备</li></ul></li><li>e2label：管理ext系列文件系统的LABEL<ul><li>e2label device</li></ul></li><li>tune2fs：重新设定ext系列文件系统可调整参数的值<ul><li>-l：查看指定文件系统超级块信息</li><li>-L ‘LABEL’ ：修改卷标</li><li>-j：将ext2升级为ext3</li><li>-O：文件系统属性启动或禁用</li><li>-o：调整文件系统的默认挂载选项</li><li>-U UUID：修改UUID号</li></ul></li><li>dumpe2fs：<ul><li>-h：查看超级块信息</li></ul></li></ul></li></ul><h4 id="文件系统检测"><a href="#文件系统检测" class="headerlink" title="文件系统检测"></a>文件系统检测</h4><ul><li>fsck：file system check<ul><li>fsck.FS_TYPE</li><li>fsck -t FS_TYPE</li><li>-a：自动修复错误</li><li>-r：交互式修复错误</li><li>FS_TYPE一定要与分区的文件系统相符</li></ul></li><li>e2fsck：ext系列文件专用的检测修复工具<ul><li>-y：自动回答为yes</li><li>-f：强制修复</li></ul></li></ul><h4 id="文件系统挂载"><a href="#文件系统挂载" class="headerlink" title="文件系统挂载"></a>文件系统挂载</h4><ul><li>挂载点下原有的文件在挂载完成后会被临时隐藏</li><li>通过查看/etc/mtab文件显示当前系统已挂载的所有设备</li><li>通过查看/proc/mounts文件显示内核追踪到的已挂载的所有设备</li><li>mount [-fnrsvw] [-t vfstype] [-o options] device dir<ul><li>device：指名要挂载的设备<ul><li>设备文件：/dev/sda4</li><li>卷标：-L ‘LABEL’</li><li>UUID：-U ‘UUID’</li><li>伪文件系统名称：proc，sysfs，devtmpfs，configfs</li></ul></li><li>dir：挂载点<ul><li>事先存在，建议使用空目录</li><li>-t vsftype：指定要挂载的设备上的文件系统类型</li><li>-r：readonly，只读挂载</li><li>-w：read and write，读写挂载</li><li>-n：不更新/etc/mtab</li><li>-a：自动挂载所有支持自动挂载的设备，定义在/etc/fstab文件中，且挂载选项中中有“自动挂载”功能</li><li>-L ‘LABEL’：以卷标指定挂载设备</li><li>-U ‘UUID’：以UUID指定挂载设备</li><li>-B，–bind：绑定目录到另一个目录上</li><li>-o options：挂载文件系统的选项<ul><li>async/sync：异步/同步模式</li><li>atime/noatime：是否更新访问时间戳，包含目录和文件</li><li>diratime/nodiratime：目录的访问时间戳</li><li>auto/noauto：是否支持自动挂载</li><li>exec/noexec：是否支持将文件系统上应用程序运行为进程</li><li>dev/nodev：是否支持在此文件系统上使用设备文件</li><li>suid/nosuid</li><li>remount：重新挂载</li><li>ro：只读</li><li>rw：读写</li><li>user/nouser：是否允许普通用户挂载此设备</li><li>acl：启用此文件系统上的acl功能</li><li>defaults：rw,suid,dev,exec,auto,nouser,and async</li><li>上述选项可多个同时使用，彼此使用逗号分隔</li></ul></li></ul></li></ul></li><li>查看正在访问指定文件系统的进程：<code>fuser -v MOUNT_POINT</code></li><li>终止所有正在访问指定的文件系统的进程：<code>fuser -km MOUNT_POINT</code></li><li>文件挂载的配置文件：/etc/fstab<ul><li>每行定义一个要挂载的文件系统</li><li>字段含义<ul><li>要挂载的设备或伪文件系统<ul><li>设备文件、LABEL、UUID、伪文件系统名称</li></ul></li><li>挂载点</li><li>文件系统类型</li><li>挂载选项</li><li>转储频率<ul><li>0：不做备份</li><li>1：每天转储</li><li>2：每隔一天转储</li></ul></li><li>自检次序<ul><li>0：不自检</li><li>1：首先自检，一般只有rootfs采用1</li></ul></li></ul></li></ul></li></ul><h4 id="文件系统空间占用等信息的查看工具"><a href="#文件系统空间占用等信息的查看工具" class="headerlink" title="文件系统空间占用等信息的查看工具"></a>文件系统空间占用等信息的查看工具</h4><ul><li>df<ul><li>-h：human-readable</li><li>-i：inodes instead of blocks</li><li>-P：以Posix兼容的格式输出</li></ul></li><li>du：查看某目录总体空间占用状态<ul><li>du [OPTION]… DIR</li><li>-h：human-readable</li><li>-s：summary</li></ul></li></ul><h4 id="文件系统上的其他概念"><a href="#文件系统上的其他概念" class="headerlink" title="文件系统上的其他概念"></a>文件系统上的其他概念</h4><ul><li>Inode：Index Node，索引节点</li><li>inode bitmap</li><li>链接文件<ul><li>硬链接：<ul><li>不能够对目录进行</li><li>不能跨分区进行</li><li>指向同一个inode的多个不同路径，创建文件的硬链接即为为inode创建新的引用路径，因此会增加其引用计数</li></ul></li><li>符号链接：<ul><li>可以对目录进行</li><li>可以跨分区</li><li>指向的是另一个文件的路径，其大小为指向的路径字符串的长度，不增加或减少目标文件的inode的引用计数</li><li>ln [-sv] SRC DEST<ul><li>-s：symbolic link</li><li>-v：verbose</li></ul></li></ul></li></ul></li><li>dd命令<ul><li>dd if=/PATH/FROM/SRC of=/PATH/TO/EDST<ul><li>bs=#：block size，复制单元大小</li><li>count=#：复制的bs数目</li></ul></li><li>磁盘拷贝<ul><li>dd if=/dev/sda of=/dev/sdb</li></ul></li><li>备份MBR<ul><li>dd if=/dev/sda of=/tmp/mbr.bak bs=512 count=1</li></ul></li><li>快速清空MBR中的bootloader<ul><li>dd if=/dev/zero of=/dev/sda bs=256 count=1</li></ul></li></ul></li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ul><li>创建一个20G的文件系统，块大小为2048，文件系统为ext4，卷标为TEST，要求此分区开机后自动挂载至/testing目录，且默认有acl挂载选项<ol><li>fdisk /dev/sda ：n +20G t 4 83 w</li><li>partx -a /dev/sda</li><li>mke2fs -t ext4 -b 2048 -L ‘TEST’ /dev/sda4</li><li>/etc/fstab: add /dev/sda4 /testing ext4 defaults,acl 0 0</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;磁盘管理&quot;&gt;&lt;a href=&quot;#磁盘管理&quot; class=&quot;headerlink&quot; title=&quot;磁盘管理&quot;&gt;&lt;/a&gt;磁盘管理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;fdisk：一块硬盘最多管理15个分区&lt;ul&gt;
&lt;li&gt;fdisk -l Device&lt;/li&gt;
&lt;li&gt;fdisk Device&lt;ul&gt;
&lt;li&gt;p：print，显示已有分区&lt;/li&gt;
&lt;li&gt;n：new，创建&lt;/li&gt;
&lt;li&gt;d：delete，删除&lt;/li&gt;
&lt;li&gt;w：write，写入磁盘并退出&lt;/li&gt;
&lt;li&gt;q：quit，放弃更改并退出&lt;/li&gt;
&lt;li&gt;m：获取帮助&lt;/li&gt;
&lt;li&gt;l：分区id列表&lt;/li&gt;
&lt;li&gt;t：调整分区id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看内核是否已经识别新的分区&lt;ul&gt;
&lt;li&gt;cat /proc/partations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通知内核重新读取硬盘分区表&lt;ul&gt;
&lt;li&gt;partx -a /dev/device&lt;ul&gt;
&lt;li&gt;-n M:N&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;kpartx -a /dev/device&lt;ul&gt;
&lt;li&gt;-f force&lt;/li&gt;
&lt;li&gt;-a&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="系统运维" scheme="https://qiu-ye.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://qiu-ye.github.io/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://qiu-ye.github.io/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>文件的特殊权限</title>
    <link href="https://qiu-ye.github.io/2018/02/28/%E6%96%87%E4%BB%B6%E7%9A%84%E7%89%B9%E6%AE%8A%E6%9D%83%E9%99%90/"/>
    <id>https://qiu-ye.github.io/2018/02/28/文件的特殊权限/</id>
    <published>2018-02-28T09:23:29.000Z</published>
    <updated>2018-02-28T11:14:03.798Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安全上下文概念"><a href="#安全上下文概念" class="headerlink" title="安全上下文概念"></a>安全上下文概念</h3><ul><li>任何一个可执行文件能不能启动为进程，取决于发起者对程序文件是否拥有执行权限</li><li>启动进程后，其进程的属主为发起者，进程的属组为发起者所属的组</li><li>进程访问文件时的权限，取决于进程的发起者<ul><li>进程的发起者与文件的属主相同，则应用文件属主权限</li><li>进程的发起者属于文件的属组，则应用文件数组权限</li><li>否则应用文件“其他”权限</li></ul></li></ul><a id="more"></a><h3 id="文件的特殊权限"><a href="#文件的特殊权限" class="headerlink" title="文件的特殊权限"></a>文件的特殊权限</h3><ul><li>SUID<ul><li>任何一个可执行文件能不能启动为进程，取决于发起者对程序文件是否拥有执行权限</li><li>启动进程后，其进程的属主为源程序文件的属主</li><li>权限设定<ul><li>chmod u+s FILE</li><li>chmod u-s FILE</li></ul></li></ul></li><li>SGID<ul><li>默认情况下，用户创建文件时，其属组为此用户所属的基本组</li><li>一旦某目录被设定为SGID，则对此目录有写权限的用户在此目录中创建的文件所属的组为此目录的属组</li><li>能否删除一个文件取决于，用户对文件所在的目录是否有写权限</li><li>权限设定<ul><li>chmod g+s DIR</li><li>chmod g-s DIR</li></ul></li></ul></li><li>Sticky<ul><li>对于一个多人可写的目录（/tmp），如果设置了sticky，则每个用户只能删除自己的文件</li><li>权限设定<ul><li>chmod o+t DIR</li><li>chmod o-t DIR</li></ul></li></ul></li><li>特殊权限可以映射为0-7的值<ul><li>SUID：映射在user，占据属主的执行权限位<ul><li>s：user拥有x权限</li><li>S：user没有x权限</li></ul></li><li>SGID：映射在group，占据属组的执行权限位<ul><li>s：group拥有x权限</li><li>S：group没有x权限</li></ul></li><li>Sticky：映射在other，占据其他的执行权限位<ul><li>t：other拥有x权限</li><li>T：other没有x权限</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安全上下文概念&quot;&gt;&lt;a href=&quot;#安全上下文概念&quot; class=&quot;headerlink&quot; title=&quot;安全上下文概念&quot;&gt;&lt;/a&gt;安全上下文概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;任何一个可执行文件能不能启动为进程，取决于发起者对程序文件是否拥有执行权限&lt;/li&gt;
&lt;li&gt;启动进程后，其进程的属主为发起者，进程的属组为发起者所属的组&lt;/li&gt;
&lt;li&gt;进程访问文件时的权限，取决于进程的发起者&lt;ul&gt;
&lt;li&gt;进程的发起者与文件的属主相同，则应用文件属主权限&lt;/li&gt;
&lt;li&gt;进程的发起者属于文件的属组，则应用文件数组权限&lt;/li&gt;
&lt;li&gt;否则应用文件“其他”权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="系统运维" scheme="https://qiu-ye.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://qiu-ye.github.io/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://qiu-ye.github.io/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>find命令总结</title>
    <link href="https://qiu-ye.github.io/2018/02/28/find%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>https://qiu-ye.github.io/2018/02/28/find命令总结/</id>
    <published>2018-02-28T05:05:51.000Z</published>
    <updated>2018-02-28T11:13:58.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查找命令：find"><a href="#查找命令：find" class="headerlink" title="查找命令：find"></a>查找命令：find</h1><h3 id="根据文件名查找"><a href="#根据文件名查找" class="headerlink" title="根据文件名查找"></a>根据文件名查找</h3><ul><li>-name “filename”：支持使用glob，*，？，[]，[^]</li><li>-iname “filename”：不区分大小写</li></ul><h3 id="根据属主、属组查找"><a href="#根据属主、属组查找" class="headerlink" title="根据属主、属组查找"></a>根据属主、属组查找</h3><ul><li>-user USERNAME：属主<ul><li>例子：find /usr -not ( -user root -o -user bin -o -user hadoop )</li></ul></li><li>-group GRPNAME：属组</li><li>-uid UserID：UID</li><li>-gid GroupID：GID</li><li>-nouser：无属主</li><li>-nogroup：无属组</li></ul><a id="more"></a><h3 id="根据文件类型查找"><a href="#根据文件类型查找" class="headerlink" title="根据文件类型查找"></a>根据文件类型查找</h3><ul><li>-type TYPE ：<ul><li>f：普通文件</li><li>d：目录</li><li>l：链接文件</li><li>s：套接字文件</li><li>b：块设备文件</li><li>c：字符文件</li><li>p：管道文件</li></ul></li></ul><h3 id="根据文件大小查找"><a href="#根据文件大小查找" class="headerlink" title="根据文件大小查找"></a>根据文件大小查找</h3><ul><li>-size [+|-]#UNIT<ul><li><strong>#UNIT</strong>：(#-1,#)<ul><li>例子：-size 5M</li><li>大于4M小于5M的文件</li></ul></li><li><strong>-#UNIT</strong>：[0,#-1]<ul><li>例子：-size -5M</li><li>小于4M的文件</li></ul></li><li><strong>+#UNIT</strong>：(#,∞)<ul><li>例子：-size +5M</li><li>大于5M的文件</li></ul></li></ul></li></ul><h3 id="根据时间戳查找"><a href="#根据时间戳查找" class="headerlink" title="根据时间戳查找"></a>根据时间戳查找</h3><ul><li>以天为单位：<ul><li>-atime [+|-]#：访问时间<ul><li><strong>#</strong>：[#,#+1)<ul><li>例子：-atime 5</li><li>5天前且6天内访问过的文件</li></ul></li><li><strong>+#</strong>：[#+1,∞]<ul><li>例子：-atime +5</li><li>6天前访问过的文件</li></ul></li><li><strong>-#</strong>：[0,#)<ul><li>例子：-atime -5</li><li>5天内访问过的文件</li></ul></li></ul></li><li>-mtime [+|-]#：修改时间</li><li>-ctime [+|-]#：状态修改时间，指文件的权限、拥有者、所属的组、链接数发生改变时的时间</li></ul></li><li>以分钟为单位：<ul><li>-amin</li><li>-mmin</li><li>-cmin</li></ul></li></ul><h3 id="根据权限查找"><a href="#根据权限查找" class="headerlink" title="根据权限查找"></a>根据权限查找</h3><ul><li>-perm [/|-]MODE<ul><li><strong>MODE</strong>：精确权限匹配</li><li><strong>/MODE</strong>：任何一类（ugo）对象的权限中只要能一位匹配即可</li><li><strong>-MODE</strong>：每一类对象都必须同时拥有为其指定的权限标准</li></ul></li></ul><h3 id="查找后的处理动作"><a href="#查找后的处理动作" class="headerlink" title="查找后的处理动作"></a>查找后的处理动作</h3><ul><li>-print：打印显示</li><li>-ls：列出</li><li>-delete：删除</li><li>-fls /path/to/somefile：查找到的所有文件的长格式信息保存至指定文件中</li><li>-ok COMMAND {} \; ：对查找到的每个文件执行由COMMAND指定的命令，对每个文件执行命令前，都会进行交互式确认<ul><li>{}：用于引用查找到的文件名称自身</li><li>例：重命名5天内修改的文件</li><li><code>find /tmp -amin -5 -ok mv {} {}.new \</code></li></ul></li><li>-exec COMMAND {} \; ：对查找到的每个文件执行由COMMAND指定的命令</li><li>注意：find传递查找到的文件至后面指定的命令时，查找到所有符合条件的文件一次性传递给后面的命令。有些命令不能接受过多的参数，此时命令可能会失败。<ul><li>另一种方式可规避此问题：<code>find | xargs COMMAND</code></li></ul></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul><li>查找/var目录下属主为root，且属组为mail的所有文件或目录</li><li><p><code>find /var -user root -group mail</code></p></li><li><p>查找/usr目录下不属于root、bin或hadoop的所有文件或目录</p></li><li><code>find /usr -not -user root -a -not -user bin -a -not -user hadoop</code></li><li><p><code>find /usr -not \( -user root -o -user bin -o -user hadoop \)</code></p></li><li><p>查找当前系统上没有属主或属组，且最近一周内曾被访问过的文件或目录</p></li><li><p><code>find / -nouser -a -nogroup -a -atime -7</code></p></li><li><p>查找/etc目录下大于1M且类型为普通文件的所有文件或目录</p></li><li><p><code>find /etc -size +1M -type f</code></p></li><li><p>查找/etc目录下所有用户都没有写权限的文件</p></li><li><p><code>find /etc -not -perm /222</code></p></li><li><p>查找/etc目录下至少有一类用户没有执行权限的文件</p></li><li><p><code>find /etc -not -perm -111</code></p></li><li><p>查找/etc/init.d目录下，所有用户都有执行权限，且其他用户有写权限的文件</p></li><li><code>find /etc/init.d -perm -113</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;查找命令：find&quot;&gt;&lt;a href=&quot;#查找命令：find&quot; class=&quot;headerlink&quot; title=&quot;查找命令：find&quot;&gt;&lt;/a&gt;查找命令：find&lt;/h1&gt;&lt;h3 id=&quot;根据文件名查找&quot;&gt;&lt;a href=&quot;#根据文件名查找&quot; class=&quot;headerlink&quot; title=&quot;根据文件名查找&quot;&gt;&lt;/a&gt;根据文件名查找&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;-name “filename”：支持使用glob，*，？，[]，[^]&lt;/li&gt;
&lt;li&gt;-iname “filename”：不区分大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;根据属主、属组查找&quot;&gt;&lt;a href=&quot;#根据属主、属组查找&quot; class=&quot;headerlink&quot; title=&quot;根据属主、属组查找&quot;&gt;&lt;/a&gt;根据属主、属组查找&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;-user USERNAME：属主&lt;ul&gt;
&lt;li&gt;例子：find /usr -not ( -user root -o -user bin -o -user hadoop )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;-group GRPNAME：属组&lt;/li&gt;
&lt;li&gt;-uid UserID：UID&lt;/li&gt;
&lt;li&gt;-gid GroupID：GID&lt;/li&gt;
&lt;li&gt;-nouser：无属主&lt;/li&gt;
&lt;li&gt;-nogroup：无属组&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="系统运维" scheme="https://qiu-ye.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://qiu-ye.github.io/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://qiu-ye.github.io/tags/CentOS/"/>
    
  </entry>
  
</feed>
